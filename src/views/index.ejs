<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ContentAI - 关键词搜索应用</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    :root {
      --sidebar-width: 250px;
      --sidebar-collapsed-width: 70px;
      --primary-color: #0d6efd;
      --secondary-color: #6c757d;
      --success-color: #198754;
      --nav-active-bg: rgba(13, 110, 253, 0.1);
      --transition-speed: 0.3s;
    }
    
    body {
      min-height: 100vh;
      overflow-x: hidden;
    }
    
    .app-container {
      display: flex;
      min-height: 100vh;
    }
    
    /* 侧边栏样式 */
    .sidebar {
      width: var(--sidebar-width);
      background-color: #f8f9fa;
      border-right: 1px solid #dee2e6;
      transition: width var(--transition-speed) ease;
      display: flex;
      flex-direction: column;
      position: fixed;
      top: 0;
      left: 0;
      bottom: 0;
      z-index: 1000;
    }
    
    .sidebar.collapsed {
      width: var(--sidebar-collapsed-width);
    }
    
    .sidebar-header {
      padding: 1rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid #dee2e6;
    }
    
    .sidebar-brand {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--primary-color);
      text-decoration: none;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .sidebar-toggle {
      background: none;
      border: none;
      color: var(--secondary-color);
      cursor: pointer;
      padding: 0.25rem;
    }
    
    .sidebar-menu {
      flex: 1;
      overflow-y: auto;
      padding: 1rem 0;
    }
    
    .nav-item {
      margin: 0.25rem 0;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      padding: 0.75rem 1rem;
      color: var(--secondary-color);
      text-decoration: none;
      white-space: nowrap;
      transition: all 0.2s ease;
      border-radius: 0.25rem;
      margin: 0 0.5rem;
    }
    
    .nav-link:hover {
      background-color: rgba(108, 117, 125, 0.1);
      color: var(--primary-color);
    }
    
    .nav-link.active {
      background-color: var(--nav-active-bg);
      color: var(--primary-color);
      font-weight: 500;
    }
    
    .nav-icon {
      margin-right: 0.75rem;
      font-size: 1.25rem;
      min-width: 1.25rem;
      text-align: center;
    }
    
    .sidebar.collapsed .nav-text {
      display: none;
    }
    
    .sidebar.collapsed .sidebar-brand {
      display: none;
    }
    
    .sidebar-footer {
      padding: 1rem;
      border-top: 1px solid #dee2e6;
      text-align: center;
      font-size: 0.875rem;
      color: var(--secondary-color);
    }
    
    /* 主内容区域样式 */
    .main-content {
      flex: 1;
      margin-left: var(--sidebar-width);
      transition: margin-left var(--transition-speed) ease;
      width: calc(100% - var(--sidebar-width));
      min-height: 100vh;
      position: relative;
    }
    
    .sidebar.collapsed + .main-content {
      margin-left: var(--sidebar-collapsed-width);
      width: calc(100% - var(--sidebar-collapsed-width));
    }
    
    .content-header {
      padding: 1rem;
      background-color: #fff;
      border-bottom: 1px solid #dee2e6;
      display: flex;
      align-items: center;
      justify-content: space-between;
      position: fixed;
      top: 0;
      left: var(--sidebar-width);
      right: 0;
      z-index: 1000;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
      transition: left var(--transition-speed) ease;
      height: 70px;
    }
    
    .sidebar.collapsed + .main-content .content-header {
      left: var(--sidebar-collapsed-width);
    }
    
    .content-title {
      margin: 0;
      font-size: 1.5rem;
      font-weight: 600;
      color: #0d6efd;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      letter-spacing: 0.5px;
      display: flex;
      align-items: center;
      position: relative;
      padding-left: 15px;
    }
    
    .content-title::before {
      content: '';
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      width: 4px;
      height: 24px;
      background-color: #0d6efd;
      border-radius: 2px;
    }
    
    .content-body {
      padding: 1.5rem;
      min-height: calc(100vh - 70px);
      overflow: hidden; /* 防止body级别滚动 */
      margin-top: 70px; /* 为固定的标题留出空间 */
    }
    
    /* 搜索模块样式 */
    .search-container {
      max-width: 800px;
      margin: 0 auto;
    }
    
    .search-header {
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .search-form {
      margin-bottom: 2rem;
    }
    
    .search-params {
      margin-top: 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .search-results {
      margin-top: 2rem;
    }
    
    .result-card {
      margin-bottom: 1.5rem;
      transition: transform 0.2s ease;
    }
    
    .result-card:hover {
      transform: translateY(-3px);
    }
    
    /* 响应式样式 */
    @media (max-width: 768px) {
      .sidebar {
        width: 0;
        overflow: hidden;
      }
      
      .sidebar.mobile-show {
        width: var(--sidebar-width);
      }
      
      .main-content {
        margin-left: 0;
        width: 100%;
      }
      
      .content-header {
        left: 0;
        width: 100%;
        padding: 0.75rem 1rem;
      }
      
      .content-title {
        font-size: 1.25rem;
      }
      
      .mobile-sidebar-toggle {
        display: block;
      }
      
      .search-params .col-md-6 {
        margin-bottom: 0.5rem;
      }
      
      .search-params .d-flex {
        flex-wrap: nowrap;
      }
    }
    
    /* 通用工具类 */
    .hidden {
      display: none !important;
    }
    
    /* 运维助手样式 */
    .ops-container {
      display: flex;
      position: relative;
      height: calc(100vh - 70px);
      overflow: hidden; /* 防止容器级别滚动 */
    }
    
    .ops-header {
      display: none; /* 隐藏标题区域 */
    }
    
    .ops-content {
      position: relative;
      display: flex;
      height: 100%;
      width: 100%;
      overflow: hidden; /* 防止整体内容区域滚动 */
    }
    
    .ops-icon-sidebar {
      position: fixed;
      left: calc(var(--sidebar-collapsed-width) + 80px);
      top: 50%;
      transform: translateY(-50%);
      height: auto;
      max-height: 140vh; /* 长度增加为原来的两倍 */
      width: 48px;
      background-color: #fff;
      border-radius: 24px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px 0;
      z-index: 9999; /* 提高z-index确保在最上层 */
      transition: all 0.3s ease;
      overflow-y: auto; /* 如果内容过多允许滚动 */
    }
    
    .sidebar.collapsed + .main-content .ops-icon-sidebar {
      left: calc(var(--sidebar-collapsed-width) + 80px);
    }
    
    .sidebar + .main-content .ops-icon-sidebar {
      left: calc(var(--sidebar-width) + 80px);
    }
    
    @media (max-width: 768px) {
      .ops-icon-sidebar {
        left: 80px;
      }
    }
    
    .ops-icon-sidebar .sidebar-icon {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 16px;
      cursor: pointer;
      color: #6c757d;
      transition: all 0.2s ease;
      position: relative;
    }
    
    .ops-icon-sidebar .sidebar-icon:hover {
      background-color: rgba(13, 110, 253, 0.1);
      color: #0d6efd;
    }
    
    .ops-icon-sidebar .sidebar-icon.active {
      background-color: #0d6efd;
      color: white;
    }
    
    .ops-icon-sidebar .sidebar-icon i {
      font-size: 1rem;
    }
    
    .ops-icon-sidebar .sidebar-icon .badge {
      position: absolute;
      top: -3px;
      right: -3px;
      font-size: 0.65rem;
      border-radius: 50%;
      min-width: 16px;
      height: 16px;
      padding: 0 3px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .ops-chat-area {
      width: 100%;
      display: flex;
      flex-direction: column;
      height: 100%;
      padding: 0;
      position: relative;
    }
    
    .chat-container {
      flex: 1;
      overflow-y: auto; /* 仅允许聊天容器滚动 */
      padding: 15px;
      background-color: #f8f9fa;
      border-radius: 10px;
      height: 100%;
      margin-bottom: 0;
      padding-bottom: 100px; /* 为固定在底部的输入框留出空间 */
    }
    
    .chat-input-container {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      width: 70%;
      max-width: 800px;
      background-color: #fff;
      border-radius: 15px;
      box-shadow: 0 3px 15px rgba(0, 0, 0, 0.2);
      z-index: 50;
    }
    
    .chat-input-container .input-group {
      border-radius: 15px;
      overflow: hidden;
    }
    
    .chat-input-container textarea {
      border: none;
      resize: none;
      padding: 15px;
      height: 60px;
    }
    
    .chat-input-container .btn {
      border-radius: 0 15px 15px 0;
      padding: 0 20px;
      background-color: #0d6efd;
      border-color: #0d6efd;
    }
    
    .chat-message {
      max-width: 80%;
      margin-bottom: 15px;
      clear: both;
      position: relative;
    }
    
    .user-message {
      float: right;
      background-color: #0d6efd;
      color: white;
      border-radius: 18px 18px 0 18px;
      padding: 12px 18px;
    }
    
    .assistant-message {
      float: left;
      background-color: white;
      color: #212529;
      border-radius: 18px 18px 18px 0;
      padding: 12px 18px;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }
    
    .error-message {
      float: left;
      background-color: #f8d7da;
      color: #842029;
      border-radius: 15px 15px 15px 0;
      padding: 10px 15px;
    }
    
    .chat-list-container {
      max-height: calc(100vh - 250px);
      overflow-y: auto;
      display: none;
      background-color: white;
      margin-top: 10px;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      position: fixed;
      top: 50%;
      left: calc(var(--sidebar-collapsed-width) + 135px);
      transform: translateY(-80%); /* 使其大致与历史按钮对齐 */
      width: 250px;
      opacity: 0;
      transition: opacity 0.3s ease, transform 0.3s ease;
      z-index: 15;
    }
    
    .chat-list-container.show {
      display: block;
      opacity: 1;
      transform: translateY(-80%);
    }
    
    .sidebar.collapsed + .main-content .chat-list-container {
      left: calc(var(--sidebar-collapsed-width) + 135px);
    }
    
    .sidebar + .main-content .chat-list-container {
      left: calc(var(--sidebar-width) + 135px);
    }
    
    @media (max-width: 768px) {
      .chat-list-container {
        left: 135px;
      }
      
      .chat-input-container {
        width: 90%;
      }
    }
    
    .welcome-message {
      margin: 0 auto;
      max-width: 500px;
      text-align: center;
      padding: 40px 20px;
    }
    
    .welcome-message h3 {
      margin-bottom: 1rem;
      font-weight: 600;
    }
    
    .welcome-message p {
      margin-bottom: 2rem;
      color: #6c757d;
      line-height: 1.5;
    }
    
    .welcome-message i {
      font-size: 4rem !important;
      color: #0d6efd;
      opacity: 0.8;
    }
    
    /* 恢复一些必要的样式 */
    .typing-indicator {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 5px;
    }
    
    .typing-indicator span {
      width: 6px;
      height: 6px;
      margin: 0 2px;
      background-color: #6c757d;
      border-radius: 50%;
      animation: typing 1s infinite ease-in-out;
    }
    
    .typing-indicator span:nth-child(1) {
      animation-delay: 0.2s;
    }
    
    .typing-indicator span:nth-child(2) {
      animation-delay: 0.4s;
    }
    
    .typing-indicator span:nth-child(3) {
      animation-delay: 0.6s;
    }
    
    @keyframes typing {
      0% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-4px);
      }
      100% {
        transform: translateY(0);
      }
    }
    
    .copy-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      width: 22px;
      height: 22px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba(255, 255, 255, 0.8);
      border: none;
      color: #6c757d;
      font-size: 0.75rem;
      opacity: 0;
      transition: opacity 0.2s ease;
    }
    
    .assistant-message:hover .copy-btn {
      opacity: 1;
    }
    
    .copy-btn.copied {
      color: #198754;
    }
    
    .chat-list-header {
      padding: 10px 15px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .chat-list {
      padding: 10px;
    }
    
    .chat-list-item {
      padding: 10px;
      border-radius: 8px;
      cursor: pointer;
      margin-bottom: 5px;
      transition: background-color 0.2s ease;
    }
    
    .chat-list-item:hover {
      background-color: #f8f9fa;
    }
    
    .chat-list-item.active {
      background-color: rgba(13, 110, 253, 0.1);
    }
    
    .chat-list-item .chat-title {
      font-weight: 500;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .chat-list-item .chat-meta {
      display: flex;
      justify-content: space-between;
      font-size: 0.75rem;
      color: #6c757d;
      margin-top: 5px;
    }
    
    .chat-list-item .delete-btn {
      visibility: hidden;
      color: #dc3545;
      background: none;
      border: none;
      padding: 0;
      font-size: 0.8rem;
    }
    
    .chat-list-item:hover .delete-btn {
      visibility: visible;
    }
  </style>
</head>
<body>
  <div class="app-container">
    <!-- 侧边导航栏 -->
    <div class="sidebar" id="sidebar">
      <div class="sidebar-header">
        <a href="/" class="sidebar-brand">ContentAI</a>
        <button class="sidebar-toggle" id="sidebar-toggle">
          <i class="bi bi-chevron-left"></i>
        </button>
      </div>
      <div class="sidebar-menu">
        <ul class="nav flex-column" id="main-nav">
          <!-- 导航项将通过JS动态加载 -->
        </ul>
      </div>
      <div class="sidebar-footer" id="sidebar-footer">
        © 2025 版权所有
      </div>
    </div>
    
    <!-- 主内容区域 -->
    <div class="main-content" id="main-content">
      <div class="content-header">
        <button class="btn d-md-none mobile-sidebar-toggle" id="mobile-sidebar-toggle">
          <i class="bi bi-list"></i>
        </button>
        <h1 class="content-title" id="content-title">内容标题</h1>
        <div class="header-actions" id="header-actions">
          <!-- 动态加载的操作按钮 -->
        </div>
      </div>
      
      <div class="content-body" id="content-body">
        <!-- 模块内容将根据选择的导航项动态加载 -->
        <div id="module-container"></div>
      </div>
    </div>
  </div>
  
  <!-- 模块模板 -->
  <template id="search-module-template">
    <div class="search-container">
      <div class="search-header">
        <h2>ContentAI 关键词搜索</h2>
        <p class="text-muted">输入关键词，快速获取相关新闻信息</p>
      </div>
      
      <div class="search-form">
        <form id="search-form" action="/search" method="GET">
          <div class="input-group">
            <input type="text" class="form-control form-control-lg" name="keywords" id="keywords" placeholder="安徽 合肥" required>
            <button type="submit" class="btn btn-primary btn-lg">
              <i class="bi bi-search me-1"></i> 搜索
            </button>
          </div>
          <small class="text-muted">支持多个关键词，用逗号分隔，支持"AND"、"OR"语法</small>
          
          <div class="search-params mt-3">
            <div class="row g-2">
              <div class="col-md-6">
                <div class="d-flex align-items-center">
                  <label for="size" class="form-label me-2 mb-0" style="flex: 0 0 auto; min-width: 90px;">每页结果数</label>
                  <select class="form-select" name="size" id="size">
                    <option value="10" selected>10</option>
                    <option value="5">5</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                  </select>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="d-flex align-items-center">
                  <label for="sort" class="form-label me-2 mb-0" style="flex: 0 0 auto; min-width: 90px;">排序方式</label>
                  <select class="form-select" name="sort" id="sort">
                    <option value="time_desc" selected>时间降序（新→旧）</option>
                    <option value="time_asc">时间升序（旧→新）</option>
                    <option value="relevance">相关性降序</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
      
      <div class="search-results text-center">
        <p>在上方输入关键词开始搜索</p>
        <i class="bi bi-search" style="font-size: 3rem; color: #dee2e6;"></i>
      </div>
    </div>
  </template>
  
  <!-- 管理模块模板 -->
  <template id="admin-module-template">
    <div class="admin-container">
      <div class="admin-header">
        <h2>管理面板</h2>
        <p class="text-muted">管理系统配置和设置</p>
      </div>
      
      <div class="row">
        <div class="col-md-3 mb-4">
          <div class="list-group admin-nav" id="admin-nav">
            <a href="#" class="list-group-item list-group-item-action active" data-target="api">
              <i class="bi bi-hdd-network me-2"></i> API配置
            </a>
            <a href="#" class="list-group-item list-group-item-action" data-target="search">
              <i class="bi bi-search me-2"></i> 搜索配置
            </a>
            <a href="#" class="list-group-item list-group-item-action" data-target="ui">
              <i class="bi bi-palette me-2"></i> UI配置
            </a>
            <a href="#" class="list-group-item list-group-item-action" data-target="cache">
              <i class="bi bi-speedometer2 me-2"></i> 缓存配置
            </a>
            <a href="#" class="list-group-item list-group-item-action" data-target="performance">
              <i class="bi bi-graph-up me-2"></i> 性能配置
            </a>
            <a href="#" class="list-group-item list-group-item-action" data-target="feedback">
              <i class="bi bi-chat-dots me-2"></i> 用户反馈配置
            </a>
            <a href="#" class="list-group-item list-group-item-action" data-target="config-history">
              <i class="bi bi-clock-history me-2"></i> 配置历史
            </a>
            <a href="#" class="list-group-item list-group-item-action" data-target="import-export">
              <i class="bi bi-arrow-left-right me-2"></i> 导入导出
            </a>
          </div>
        </div>
        
        <div class="col-md-9">
          <div class="card">
            <div class="card-header" id="admin-config-title">
              API配置
            </div>
            <div class="card-body" id="admin-config-content">
              <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status"></div>
                <p class="mt-3">加载配置中...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>
  
  <!-- 运维助手模块模板 -->
  <template id="ops-module-template">
    <div class="ops-container">
      <div class="ops-content">
        <!-- 图标侧边栏 -->
        <div class="ops-icon-sidebar">
          <div class="sidebar-icon active" id="chat-icon" data-bs-toggle="tooltip" data-bs-placement="right" title="对话">
            <i class="bi bi-chat-dots"></i>
          </div>
          <div class="sidebar-icon" id="new-chat-icon" data-bs-toggle="tooltip" data-bs-placement="right" title="新建对话">
            <i class="bi bi-plus"></i>
          </div>
          <div class="sidebar-icon" id="history-icon" data-bs-toggle="tooltip" data-bs-placement="right" title="历史记录">
            <i class="bi bi-clock-history"></i>
            <span class="badge bg-primary" id="history-count">0</span>
          </div>
          
          <!-- 系统选择下拉菜单已移除 -->
        </div>
        
        <!-- 历史对话列表 -->
        <div class="chat-list-container" id="chat-list-container">
          <div class="chat-list-header">
            <h6 class="mb-0">历史对话</h6>
            <button class="btn btn-sm" id="close-history-btn"><i class="bi bi-x"></i></button>
          </div>
          <div class="chat-list" id="chat-history-list">
            <!-- 对话历史记录将在此动态显示 -->
            <div class="text-center p-4 text-muted">
              <i class="bi bi-chat-left-text fs-4 mb-2"></i>
              <p>暂无历史对话</p>
            </div>
          </div>
        </div>
        
        <!-- 对话区域 -->
        <div class="ops-chat-area">
          <div class="chat-container" id="chat-container">
            <div class="welcome-message text-center p-5" id="welcome-message">
              <h3 class="mb-3">欢迎使用运维助手</h3>
              <p class="mb-4">请在下方输入您的问题，我将尽力帮助您解决运维相关问题</p>
              <i class="bi bi-robot fs-1 text-primary"></i>
            </div>
            
            <!-- 对话内容将在此动态显示 -->
            <div id="chat-messages"></div>
          </div>
          
          <div class="chat-input-container">
            <form id="chat-form">
              <div class="input-group">
                <textarea class="form-control" id="chat-input" placeholder="输入您的问题..." rows="2"></textarea>
                <button type="submit" class="btn btn-primary">
                  <i class="bi bi-send"></i>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </template>
  
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // 模块定义
    const modules = [
      {
        id: 'search',
        name: '搜索测试',
        icon: 'bi-search',
        template: '#search-module-template',
        default: true
      },
      {
        id: 'ops',
        name: '运维助手',
        icon: 'bi-headset',
        template: '#ops-module-template'
      },
      {
        id: 'admin',
        name: '管理面板',
        icon: 'bi-gear',
        template: '#admin-module-template'
      }
      // 可在此添加更多模块
    ];
    
    // 应用状态
    const appState = {
      currentModule: null,
      sidebarCollapsed: false,
      isAuthenticated: <%= locals.isAuthenticated ? 'true' : 'false' %>,
    };
    
    // 初始化应用
    function initApp() {
      // 渲染导航
      renderNavigation();
      
      // 初始化侧边栏切换
      initSidebarToggle();
      
      // 初始化模块路由
      initModuleRouting();
      
      // 加载默认模块
      loadDefaultModule();
    }
    
    // 渲染导航菜单
    function renderNavigation() {
      const navContainer = document.getElementById('main-nav');
      
      if (navContainer) {
        // 清空导航容器
        navContainer.innerHTML = '';
        
        // 创建导航项
        modules.forEach(module => {
          const navItem = document.createElement('li');
          navItem.className = 'nav-item';
          
          const navLink = document.createElement('a');
          navLink.href = `#${module.id}`;
          navLink.className = 'nav-link';
          navLink.dataset.moduleId = module.id;
          
          const icon = document.createElement('i');
          icon.className = `bi ${module.icon} nav-icon`;
          
          const text = document.createElement('span');
          text.className = 'nav-text';
          text.textContent = module.name;
          
          navLink.appendChild(icon);
          navLink.appendChild(text);
          navItem.appendChild(navLink);
          navContainer.appendChild(navItem);
        });
      }
    }
    
    // 初始化侧边栏切换
    function initSidebarToggle() {
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const sidebar = document.getElementById('sidebar');
      
      sidebarToggle.addEventListener('click', () => {
        sidebar.classList.toggle('collapsed');
        
        // 更新切换按钮图标
        const icon = sidebarToggle.querySelector('i');
        if (sidebar.classList.contains('collapsed')) {
          icon.className = 'bi bi-chevron-right';
          appState.sidebarCollapsed = true;
        } else {
          icon.className = 'bi bi-chevron-left';
          appState.sidebarCollapsed = false;
        }
        
        // 保存侧边栏状态到本地存储
        localStorage.setItem('sidebar-collapsed', appState.sidebarCollapsed);
      });
      
      // 恢复侧边栏状态
      const savedState = localStorage.getItem('sidebar-collapsed');
      if (savedState === 'true') {
        sidebar.classList.add('collapsed');
        sidebarToggle.querySelector('i').className = 'bi bi-chevron-right';
        appState.sidebarCollapsed = true;
      }
      
      // 移动端侧边栏切换
      const mobileSidebarToggle = document.getElementById('mobile-sidebar-toggle');
      if (mobileSidebarToggle) {
        mobileSidebarToggle.addEventListener('click', () => {
          sidebar.classList.toggle('mobile-show');
        });
      }
    }
    
    // 初始化模块路由
    function initModuleRouting() {
      // 使用正确的选择器，选择带有data-module-id属性的导航链接
      const moduleLinks = document.querySelectorAll('.nav-link[data-module-id]');
      
      moduleLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          
          // 获取模块ID
          const moduleId = this.dataset.moduleId;
          
          // 查找模块定义
          const module = modules.find(m => m.id === moduleId);
          
          // 检查权限 - 管理模块需要登录
          if (moduleId === 'admin' && !appState.isAuthenticated) {
            // 未登录状态下点击管理面板，重定向到登录页面
            redirectToLogin();
            return;
          }
          
          // 加载模块
          loadModule(moduleId);
          
          // 更新URL哈希但不触发hashchange事件
          history.pushState(null, null, `#${moduleId}`);
        });
      });
      
      // 监听URL哈希变化
      window.addEventListener('hashchange', () => {
        const hash = window.location.hash.substring(1);
        if (hash) {
          loadModule(hash);
        } else {
          loadDefaultModule();
        }
      });
    }
    
    // 加载默认模块
    function loadDefaultModule() {
      const hash = window.location.hash.substring(1);
      
      if (hash) {
        loadModule(hash);
      } else {
        // 查找默认模块
        const defaultModule = modules.find(m => m.default);
        if (defaultModule) {
          loadModule(defaultModule.id);
          history.replaceState(null, null, `#${defaultModule.id}`);
        }
      }
    }
    
    // 加载模块内容
    function loadModule(moduleId) {
      // 查找模块定义
      const module = modules.find(m => m.id === moduleId);
      
      if (!module) {
        console.error(`模块不存在: ${moduleId}`);
        return;
      }
      
      // 管理模块需要登录
      if (moduleId === 'admin' && !appState.isAuthenticated) {
        redirectToLogin();
        return;
      }
      
      // 更新当前模块
      appState.currentModule = module;
      
      // 更新导航项激活状态
      document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('active');
        if (link.dataset.moduleId === moduleId) {
          link.classList.add('active');
        }
      });
      
      // 更新页面标题
      document.getElementById('content-title').textContent = module.name;
      
      // 加载模块内容
      const container = document.getElementById('module-container');
      const template = document.querySelector(module.template);
      
      if (template) {
        container.innerHTML = '';
        container.appendChild(document.importNode(template.content, true));
        
        // 初始化模块特定功能
        initModuleSpecific(module);
      } else {
        container.innerHTML = `<div class="alert alert-danger">模块模板不存在: ${module.template}</div>`;
      }
    }
    
    // 初始化模块特定功能
    function initModuleSpecific(module) {
      switch(module.id) {
        case 'search':
          initSearchModule();
          break;
        case 'admin':
          initAdminModule();
          break;
        case 'ops':
          initOpsModule();
          break;
        // 其他模块的初始化...
      }
    }
    
    // 初始化搜索模块
    function initSearchModule() {
      // 绑定搜索表单提交事件
      const searchForm = document.getElementById('search-form');
      if (searchForm) {
        searchForm.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const keywords = document.getElementById('keywords').value.trim();
          const size = document.getElementById('size').value;
          const sort = document.getElementById('sort').value;
          
          if (!keywords) {
            alert('请输入搜索关键词');
            return;
          }
          
          // 跳转到搜索结果页
          window.location.href = `/search?keywords=${encodeURIComponent(keywords)}&size=${size}&sort=${sort}`;
        });
      }
    }
    
    // 初始化管理模块
    function initAdminModule() {
      // 绑定管理导航点击事件
      const adminNav = document.getElementById('admin-nav');
      if (adminNav) {
        adminNav.querySelectorAll('.list-group-item').forEach(item => {
          item.addEventListener('click', function(e) {
            e.preventDefault();
            
            // 更新活动状态
            adminNav.querySelectorAll('.list-group-item').forEach(el => {
              el.classList.remove('active');
            });
            this.classList.add('active');
            
            // 获取目标配置
            const target = this.dataset.target;
            
            // 更新标题
            document.getElementById('admin-config-title').textContent = this.textContent.trim();
            
            // 根据目标加载不同的配置内容
            loadAdminContent(target);
          });
        });
        
        // 默认加载第一个配置选项
        loadAdminContent('api');
      }
    }
    
    // 加载管理内容
    function loadAdminContent(target) {
      const contentContainer = document.getElementById('admin-config-content');
      
      // 显示加载状态
      contentContainer.innerHTML = `
        <div class="text-center py-5">
          <div class="spinner-border text-primary" role="status"></div>
          <p class="mt-3">加载${getConfigTitle(target)}中...</p>
        </div>
      `;
      
      // 发送AJAX请求获取配置内容
      $.ajax({
        url: `/admin/config/${target.replace('-config', '')}`,
        method: 'GET',
        success: function(response) {
          if (response.success) {
            renderConfigForm(contentContainer, target, response.data);
          } else {
            contentContainer.innerHTML = `
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle me-2"></i>
                加载配置失败: ${response.message || '未知错误'}
                <hr>
                <p class="mb-0">请确保已正确登录管理员账户，并且服务器配置模块正常运行。</p>
              </div>
            `;
            console.error('加载配置失败:', response);
          }
        },
        error: function(xhr, status, error) {
          contentContainer.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle me-2"></i>
              加载配置失败: ${xhr.responseJSON?.message || error || '未知错误'}
              <hr>
              <p class="mb-0">请检查服务器是否正常运行，并且确保配置API路由工作正常。</p>
              <p class="mb-0">错误状态: ${status}, 状态码: ${xhr.status}</p>
            </div>
          `;
          console.error('配置请求错误:', { xhr, status, error });
        }
      });
    }
    
    // 渲染配置表单
    function renderConfigForm(container, target, data) {
      // 生成一个基本的表单模板
      const formHtml = `
        <form id="${target}-form">
          <div id="${target}-fields"></div>
          
          <div class="d-flex justify-content-between mt-4">
            <button type="submit" class="btn btn-primary">
              <i class="bi bi-save me-1"></i> 保存设置
            </button>
            <button type="button" class="btn btn-outline-secondary reset-config">
              <i class="bi bi-arrow-counterclockwise me-1"></i> 重置为默认值
            </button>
          </div>
        </form>
      `;
      
      container.innerHTML = formHtml;
      
      // 获取字段容器
      const fieldsContainer = document.getElementById(`${target}-fields`);
      
      // 根据配置数据生成表单字段
      if (data && typeof data === 'object') {
        Object.entries(data).forEach(([key, value]) => {
          // 将值转换为配置对象格式
          const config = typeof value === 'object' && value !== null ? value : { value: value };
          
          // 推断类型
          if (config.type === undefined) {
            if (typeof config.value === 'boolean') {
              config.type = 'boolean';
            } else if (typeof config.value === 'number') {
              config.type = 'number';
            } else if (Array.isArray(config.options)) {
              config.type = 'select';
            } else {
              config.type = 'text';
            }
          }
          
          // 设置标签
          if (!config.label) {
            config.label = key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, ' ');
          }
          
          const fieldHtml = createConfigField(key, config);
          fieldsContainer.innerHTML += fieldHtml;
        });
      } else {
        fieldsContainer.innerHTML = `
          <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i>
            无可用配置项
          </div>
        `;
      }
      
      // 绑定表单事件
      bindConfigFormEvents(target);
    }
    
    // 创建配置字段
    function createConfigField(key, config) {
      let fieldHtml = '';
      
      // 根据配置类型生成不同的表单控件
      switch (config.type) {
        case 'boolean':
          fieldHtml = `
            <div class="mb-3 form-check">
              <input type="checkbox" class="form-check-input" id="${key}" name="${key}" ${config.value ? 'checked' : ''}>
              <label class="form-check-label" for="${key}">${config.label || key}</label>
              ${config.description ? `<div class="form-text">${config.description}</div>` : ''}
            </div>
          `;
          break;
          
        case 'select':
          let options = '';
          if (config.options && Array.isArray(config.options)) {
            config.options.forEach(option => {
              if (typeof option === 'object') {
                options += `<option value="${option.value}" ${option.value === config.value ? 'selected' : ''}>${option.label}</option>`;
              } else {
                options += `<option value="${option}" ${option === config.value ? 'selected' : ''}>${option}</option>`;
              }
            });
          }
          
          fieldHtml = `
            <div class="mb-3">
              <label for="${key}" class="form-label">${config.label || key}</label>
              <select class="form-select" id="${key}" name="${key}">
                ${options}
              </select>
              ${config.description ? `<div class="form-text">${config.description}</div>` : ''}
            </div>
          `;
          break;
          
        case 'number':
          fieldHtml = `
            <div class="mb-3">
              <label for="${key}" class="form-label">${config.label || key}</label>
              <input type="number" class="form-control" id="${key}" name="${key}" value="${config.value}" 
                ${config.min !== undefined ? `min="${config.min}"` : ''} 
                ${config.max !== undefined ? `max="${config.max}"` : ''} 
                ${config.step !== undefined ? `step="${config.step}"` : ''}>
              ${config.description ? `<div class="form-text">${config.description}</div>` : ''}
            </div>
          `;
          break;
          
        default: // text类型和其他类型
          fieldHtml = `
            <div class="mb-3">
              <label for="${key}" class="form-label">${config.label || key}</label>
              <input type="text" class="form-control" id="${key}" name="${key}" value="${config.value || ''}">
              ${config.description ? `<div class="form-text">${config.description}</div>` : ''}
            </div>
          `;
      }
      
      return fieldHtml;
    }
    
    // 绑定配置表单事件
    function bindConfigFormEvents(target) {
      const form = document.getElementById(`${target}-form`);
      if (form) {
        // 表单提交事件
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          
          // 收集表单数据
          const formData = {};
          
          // 处理不同类型的表单元素
          form.querySelectorAll('input, select, textarea').forEach(element => {
            if (element.type === 'checkbox') {
              formData[element.name] = element.checked;
            } else if (element.type === 'number') {
              formData[element.name] = parseFloat(element.value);
            } else {
              formData[element.name] = element.value;
            }
          });
          
          // 发送AJAX请求保存配置
          $.ajax({
            url: `/admin/config/${target.replace('-config', '')}`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(response) {
              if (response.success) {
                // 显示成功消息
                const alert = document.createElement('div');
                alert.className = 'alert alert-success mt-3';
                alert.innerHTML = `<i class="bi bi-check-circle me-2"></i> 配置已成功保存`;
                form.appendChild(alert);
                
                // 3秒后自动隐藏消息
                setTimeout(() => {
                  alert.remove();
                }, 3000);
              } else {
                // 显示错误消息
                const alert = document.createElement('div');
                alert.className = 'alert alert-danger mt-3';
                alert.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i> 保存配置失败: ${response.message || '未知错误'}`;
                form.appendChild(alert);
              }
            },
            error: function(xhr, status, error) {
              // 显示错误消息
              const alert = document.createElement('div');
              alert.className = 'alert alert-danger mt-3';
              alert.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i> 保存配置失败: ${xhr.responseJSON?.message || error || '未知错误'}`;
              form.appendChild(alert);
            }
          });
        });
        
        // 重置按钮点击事件
        const resetBtn = form.querySelector('.reset-config');
        if (resetBtn) {
          resetBtn.addEventListener('click', function() {
            if (confirm('确定要重置所有配置为默认值吗？')) {
              // 发送AJAX请求重置配置
              $.ajax({
                url: `/admin/config/${target.replace('-config', '')}/reset`,
                method: 'POST',
                success: function(response) {
                  if (response.success) {
                    // 重新加载配置
                    loadAdminContent(target);
                  } else {
                    // 显示错误消息
                    const alert = document.createElement('div');
                    alert.className = 'alert alert-danger mt-3';
                    alert.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i> 重置配置失败: ${response.message || '未知错误'}`;
                    form.appendChild(alert);
                  }
                },
                error: function(xhr, status, error) {
                  // 显示错误消息
                  const alert = document.createElement('div');
                  alert.className = 'alert alert-danger mt-3';
                  alert.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i> 重置配置失败: ${xhr.responseJSON?.message || error || '未知错误'}`;
                  form.appendChild(alert);
                }
              });
            }
          });
        }
      }
    }
    
    // 获取配置标题
    function getConfigTitle(target) {
      const titles = {
        'api': 'API配置',
        'search': '搜索配置',
        'ui': 'UI配置',
        'cache': '缓存配置',
        'performance': '性能配置',
        'feedback': '用户反馈配置',
        'config-history': '配置历史',
        'import-export': '导入导出'
      };
      
      return titles[target] || '配置';
    }
    
    // 跳转到登录页面
    function redirectToLogin() {
      window.location.href = '/admin/login?redirect=' + encodeURIComponent(window.location.href);
    }
    
    // 初始化运维助手模块
    function initOpsModule() {
      const chatForm = document.getElementById('chat-form');
      const chatInput = document.getElementById('chat-input');
      const chatMessages = document.getElementById('chat-messages');
      const historyIcon = document.getElementById('history-icon');
      const newChatIcon = document.getElementById('new-chat-icon');
      const chatListContainer = document.getElementById('chat-list-container');
      const closeHistoryBtn = document.getElementById('close-history-btn');
      const chatHistoryList = document.getElementById('chat-history-list');
      const historyCount = document.getElementById('history-count');
      
      // 当前会话ID和系统
      let currentChatId = generateChatId();
      let currentSystem = 'dayang';
      
      // 初始化工具提示
      const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
      tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
      });
      
      // 获取历史对话记录
      loadChatHistory();
      updateHistoryCount();
      
      // 聊天表单提交
      if (chatForm) {
        chatForm.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const question = chatInput.value.trim();
          if (!question) return;
          
          // 清空输入框
          chatInput.value = '';
          
          // 显示用户问题
          appendMessage('user', question);
          
          // 显示"对方正在输入"的动画
          const typingIndicator = appendTypingIndicator();
          
          // 调用后端API，使用运维助手配置中指定的默认工作流
          fetch('/api/ops/workflow', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              message: question,
              system: currentSystem
              // 注意：不传递workflowId，后端会使用配置中的默认工作流
            })
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP错误：${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            // 移除"正在输入"的动画
            removeTypingIndicator(typingIndicator);
            
            if (data.success) {
              // 显示回答
              appendMessage('assistant', data.data.content);
              
              // 保存对话记录
              saveChatHistory(currentChatId, question, data.data.content, currentSystem);
              
              // 更新历史记录列表和计数
              loadChatHistory();
              updateHistoryCount();
            } else {
              // 显示错误信息
              appendMessage('error', data.message || '获取回答时出错，请稍后再试');
            }
          })
          .catch(error => {
            // 移除"正在输入"的动画
            removeTypingIndicator(typingIndicator);
            
            // 显示错误信息
            appendMessage('error', `调用工作流出错：${error.message}`);
            console.error('工作流调用错误:', error);
          });
        });
      }
      
      // 新建对话
      if (newChatIcon) {
        newChatIcon.addEventListener('click', function() {
          // 生成新的会话ID
          currentChatId = generateChatId();
          
          // 清空当前对话区域
          chatMessages.innerHTML = '';
          
          // 显示欢迎消息（使用与初始页面相同的欢迎消息）
          const welcomeMessage = document.getElementById('welcome-message');
          if (welcomeMessage) {
            welcomeMessage.style.display = 'block';
          } else {
            // 如果欢迎消息元素不存在，则创建一个
            const newWelcomeMessage = document.createElement('div');
            newWelcomeMessage.id = 'welcome-message';
            newWelcomeMessage.className = 'welcome-message text-center p-5';
            newWelcomeMessage.innerHTML = `
              <h3 class="mb-3">欢迎使用运维助手</h3>
              <p class="mb-4">请在下方输入您的问题，我将尽力帮助您解决运维相关问题</p>
              <i class="bi bi-robot fs-1 text-primary"></i>
            `;
            chatContainer.insertBefore(newWelcomeMessage, chatMessages);
          }
          
          // 关闭历史记录面板
          chatListContainer.classList.remove('show');
          
          // 更新图标激活状态
          updateIconActiveState('chat-icon');
        });
      }
      
      // 加载历史对话记录
      function loadChatHistory() {
        // 从localStorage获取历史记录
        const history = getHistoryFromStorage();
        
        // 更新UI
        if (chatHistoryList) {
          if (history.length === 0) {
            chatHistoryList.innerHTML = `
              <div class="text-center p-4 text-muted">
                <i class="bi bi-chat-left-text fs-4 mb-2"></i>
                <p>暂无历史对话</p>
              </div>
            `;
          } else {
            chatHistoryList.innerHTML = '';
            
            // 按时间倒序排列
            history.sort((a, b) => b.timestamp - a.timestamp);
            
            history.forEach(chat => {
              const historyItem = document.createElement('div');
              historyItem.className = `chat-list-item ${chat.id === currentChatId ? 'active' : ''}`;
              historyItem.dataset.chatId = chat.id;
              
              // 计算相对时间
              const date = new Date(chat.timestamp);
              const formattedDate = date.toLocaleString('zh-CN', {
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric'
              });
              
              const firstUserMessage = chat.messages.find(m => m.role === 'user');
              const title = firstUserMessage ? firstUserMessage.content : '新对话';
              
              historyItem.innerHTML = `
                <div class="chat-title">${title.substring(0, 25)}${title.length > 25 ? '...' : ''}</div>
                <div class="chat-meta">
                  <span>${chat.system === 'dayang' ? '大洋系统' : '索贝系统'}</span>
                  <span>${formattedDate}</span>
                </div>
                <button class="delete-btn" data-chat-id="${chat.id}">
                  <i class="bi bi-trash"></i>
                </button>
              `;
              
              chatHistoryList.appendChild(historyItem);
              
              // 点击加载对话
              historyItem.addEventListener('click', function(e) {
                // 忽略删除按钮的点击
                if (e.target.closest('.delete-btn')) return;
                
                // 设置当前会话ID
                currentChatId = chat.id;
                currentSystem = chat.system;
                
                // 加载对话内容
                loadChatMessages(chat);
                
                // 更新激活状态
                document.querySelectorAll('.chat-list-item').forEach(item => {
                  item.classList.remove('active');
                });
                historyItem.classList.add('active');
                
                // 关闭历史记录面板并更新图标状态
                chatListContainer.classList.remove('show');
                updateIconActiveState('chat-icon');
              });
            });
            
            // 绑定删除按钮
            document.querySelectorAll('.delete-btn').forEach(btn => {
              btn.addEventListener('click', function(e) {
                e.stopPropagation();
                const chatId = this.dataset.chatId;
                deleteChat(chatId);
                
                // 如果删除的是当前对话，则创建新对话
                if (chatId === currentChatId) {
                  newChatIcon.click();
                }
              });
            });
          }
        }
      }
      
      // 加载特定对话的消息
      function loadChatMessages(chat) {
        if (chatMessages) {
          chatMessages.innerHTML = '';
          
          // 隐藏欢迎消息
          const welcomeMessage = document.getElementById('welcome-message');
          if (welcomeMessage) {
            welcomeMessage.style.display = 'none';
          }
          
          chat.messages.forEach(msg => {
            appendMessage(msg.role, msg.content);
          });
        }
      }
      
      // 添加消息到对话区域
      function appendMessage(role, content) {
        if (!chatMessages) return;
        
        // 如果有欢迎信息，先隐藏它
        const welcomeMessage = document.getElementById('welcome-message');
        if (welcomeMessage) {
          welcomeMessage.style.display = 'none';
        }
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${role}-message`;
        
        // 格式化内容（处理换行符等）
        const formattedContent = formatContent(content);
        
        messageDiv.innerHTML = `
          <div class="message-content">${formattedContent}</div>
          ${role === 'assistant' ? `<button class="btn btn-sm copy-btn" title="复制内容"><i class="bi bi-clipboard"></i></button>` : ''}
        `;
        
        chatMessages.appendChild(messageDiv);
        
        // 滚动到底部
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // 绑定复制功能
        if (role === 'assistant') {
          const copyBtn = messageDiv.querySelector('.copy-btn');
          copyBtn.addEventListener('click', function() {
            navigator.clipboard.writeText(content).then(() => {
              copyBtn.innerHTML = '<i class="bi bi-check"></i>';
              copyBtn.classList.add('copied');
              
              setTimeout(() => {
                copyBtn.innerHTML = '<i class="bi bi-clipboard"></i>';
                copyBtn.classList.remove('copied');
              }, 2000);
            });
          });
        }
      }
      
      // 添加"正在输入"的动画
      function appendTypingIndicator() {
        if (!chatMessages) return null;
        
        const typingDiv = document.createElement('div');
        typingDiv.className = 'chat-message assistant-message typing';
        typingDiv.innerHTML = `
          <div class="typing-indicator">
            <span></span>
            <span></span>
            <span></span>
          </div>
        `;
        
        chatMessages.appendChild(typingDiv);
        
        // 滚动到底部
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        return typingDiv;
      }
      
      // 移除"正在输入"的动画
      function removeTypingIndicator(element) {
        if (element && element.parentNode) {
          element.parentNode.removeChild(element);
        }
      }
      
      // 格式化内容（处理换行符、代码块等）
      function formatContent(content) {
        // 替换换行符为<br>
        let formatted = content.replace(/\n/g, '<br>');
        
        // 处理代码块（简单实现，实际项目可能需要更复杂的处理，例如使用markdown解析器）
        formatted = formatted.replace(/```(.+?)```/gs, '<pre><code>$1</code></pre>');
        
        return formatted;
      }
      
      // 生成唯一的会话ID
      function generateChatId() {
        return 'chat_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      }
      
      // 保存对话到localStorage
      function saveChatHistory(chatId, question, answer, system) {
        const history = getHistoryFromStorage();
        
        // 查找现有的对话
        let chat = history.find(c => c.id === chatId);
        
        if (!chat) {
          // 创建新的对话记录
          chat = {
            id: chatId,
            system: system,
            timestamp: Date.now(),
            messages: []
          };
          history.push(chat);
        }
        
        // 添加当前的问答
        chat.messages.push({
          role: 'user',
          content: question,
          timestamp: Date.now()
        });
        
        chat.messages.push({
          role: 'assistant',
          content: answer,
          timestamp: Date.now()
        });
        
        // 更新时间戳
        chat.timestamp = Date.now();
        
        // 保存到localStorage
        localStorage.setItem('ops_chat_history', JSON.stringify(history));
        
        // 清理超过7天的历史记录
        cleanupOldHistory();
      }
      
      // 从localStorage获取历史记录
      function getHistoryFromStorage() {
        const storageData = localStorage.getItem('ops_chat_history');
        return storageData ? JSON.parse(storageData) : [];
      }
      
      // 删除特定的对话
      function deleteChat(chatId) {
        let history = getHistoryFromStorage();
        
        // 过滤掉要删除的对话
        history = history.filter(chat => chat.id !== chatId);
        
        // 保存到localStorage
        localStorage.setItem('ops_chat_history', JSON.stringify(history));
        
        // 重新加载历史记录列表
        loadChatHistory();
      }
      
      // 清理超过7天的历史记录
      function cleanupOldHistory() {
        let history = getHistoryFromStorage();
        
        // 当前时间减去7天
        const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000);
        
        // 过滤掉超过7天的记录
        history = history.filter(chat => chat.timestamp >= sevenDaysAgo);
        
        // 保存到localStorage
        localStorage.setItem('ops_chat_history', JSON.stringify(history));
      }
      
      // 更新历史记录数量
      function updateHistoryCount() {
        const history = getHistoryFromStorage();
        historyCount.textContent = history.length;
        historyCount.style.display = history.length > 0 ? 'flex' : 'none';
      }
      
      // 历史记录图标点击
      if (historyIcon) {
        historyIcon.addEventListener('click', function() {
          chatListContainer.classList.toggle('show');
          updateIconActiveState('history-icon');
        });
      }
      
      // 关闭历史记录按钮
      if (closeHistoryBtn) {
        closeHistoryBtn.addEventListener('click', function() {
          chatListContainer.classList.remove('show');
          updateIconActiveState('chat-icon');
        });
      }
      
      // 点击对话图标
      document.getElementById('chat-icon').addEventListener('click', function() {
        chatListContainer.classList.remove('show');
        updateIconActiveState('chat-icon');
      });
      
      // 更新图标激活状态
      function updateIconActiveState(activeIconId) {
        document.querySelectorAll('.sidebar-icon').forEach(icon => {
          icon.classList.remove('active');
        });
        document.getElementById(activeIconId).classList.add('active');
      }
    }
    
    // 文档加载完成后初始化应用
    document.addEventListener('DOMContentLoaded', initApp);
  </script>
</body>
</html> 