<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ContentAI - 运维助手配置</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
  <link href="/css/admin.css" rel="stylesheet">
</head>
<body>
  <div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h2><i class="bi bi-headset me-2"></i>运维助手配置</h2>
      <a href="/admin" class="btn btn-outline-secondary">
        <i class="bi bi-arrow-left me-2"></i>返回管理面板
      </a>
    </div>

    <div class="row">
      <div class="col-lg-4 mb-4">
        <div class="card h-100">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">配置列表</h5>
            <button type="button" class="btn btn-sm btn-success" id="addNewConfig">
              <i class="bi bi-plus-circle me-1"></i>新增配置
            </button>
          </div>
          <div class="card-body">
            <div class="list-group" id="configList">
              <!-- 配置列表会通过JS动态加载 -->
              <div class="text-center py-4 text-muted" id="emptyConfigList">
                <i class="bi bi-inbox fs-1"></i>
                <p class="mt-2">暂无配置</p>
                <button class="btn btn-primary" id="createFirstConfig">
                  <i class="bi bi-plus-circle me-1"></i>创建第一个配置
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-lg-8">
        <div class="card mb-4">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">配置详情</h5>
            <div>
              <button type="button" class="btn btn-sm btn-outline-danger me-2" id="deleteConfig" disabled>
                <i class="bi bi-trash me-1"></i>删除
              </button>
              <button type="button" class="btn btn-sm btn-primary" id="saveConfig" disabled>
                <i class="bi bi-save me-1"></i>保存
              </button>
            </div>
          </div>
          <div class="card-body">
            <form id="configForm">
              <input type="hidden" id="configId">
              
              <div class="mb-3">
                <label for="configName" class="form-label">配置名称 <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="configName" required placeholder="例如: 默认配置, 测试环境...">
                <div class="form-text">用于区分不同的配置，建议使用有意义的名称</div>
              </div>
              
              <div class="mb-3">
                <label for="accessToken" class="form-label">Access Token <span class="text-danger">*</span></label>
                <div class="input-group">
                  <input type="password" class="form-control" id="accessToken" required>
                  <button class="btn btn-outline-secondary" type="button" id="toggleAccessToken">
                    <i class="bi bi-eye"></i>
                  </button>
                </div>
                <div class="form-text">API访问令牌，用于认证访问运维助手API</div>
              </div>
              
              <div class="mb-3">
                <label for="apiBaseUrl" class="form-label">API基础URL <span class="text-danger">*</span></label>
                <input type="url" class="form-control" id="apiBaseUrl" value="https://api.coze.cn/v1/workflow/run" required>
                <div class="form-text">运维助手API的基础URL</div>
              </div>
              
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="apiTimeout" class="form-label">API超时时间（毫秒）</label>
                    <input type="number" class="form-control" id="apiTimeout" value="30000" min="1000" step="1000">
                    <div class="form-text">请求超时时间，默认30秒</div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="recordRetention" class="form-label">历史记录保留天数</label>
                    <input type="number" class="form-control" id="recordRetention" value="7" min="1" max="30">
                    <div class="form-text">对话历史保存天数，默认7天</div>
                  </div>
                </div>
              </div>
              
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="defaultSystem" class="form-label">默认应用系统</label>
                    <select class="form-select" id="defaultSystem">
                      <option value="ocean">大洋系统</option>
                      <option value="sobey">索贝系统</option>
                    </select>
                    <div class="form-text">默认选择的应用系统</div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="promptText" class="form-label">输入框提示文本</label>
                    <input type="text" class="form-control" id="promptText" value="请输入您的运维问题...">
                  </div>
                </div>
              </div>
              
              <div class="mb-3">
                <label for="defaultWorkflow" class="form-label">默认使用的工作流 <span class="text-danger">*</span></label>
                <select class="form-select" id="defaultWorkflow" required>
                  <option value="">-- 请选择工作流 --</option>
                  <!-- 工作流选项将通过JS动态加载 -->
                </select>
                <div class="form-text">选择此配置默认使用的工作流，工作流可在工作流配置页面添加</div>
              </div>
              
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="enableMarkdown" checked>
                <label class="form-check-label" for="enableMarkdown">启用Markdown格式显示</label>
              </div>
              
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="isDefault">
                <label class="form-check-label" for="isDefault">设为默认配置</label>
                <div class="form-text">系统启动时将自动使用默认配置</div>
              </div>
            </form>
            
            <div class="mt-3" id="formMessage"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 脚本 -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
  
  <script>
    $(document).ready(function() {
      // 全局变量
      let configs = [];
      let currentConfigId = null;
      
      // 初始加载
      loadAllConfigs();
      
      // 切换Access Token显示/隐藏
      $('#toggleAccessToken').on('click', function() {
        const $input = $('#accessToken');
        const $icon = $(this).find('i');
        
        if ($input.attr('type') === 'password') {
          $input.attr('type', 'text');
          $icon.removeClass('bi-eye').addClass('bi-eye-slash');
        } else {
          $input.attr('type', 'password');
          $icon.removeClass('bi-eye-slash').addClass('bi-eye');
        }
      });
      
      // 添加新配置按钮
      $('#addNewConfig, #createFirstConfig').on('click', function() {
        resetForm();
        enableForm();
        $('#configName').val('新配置');
        $('#configForm').trigger('reset');
        $('#configId').val('new_' + Date.now());
        currentConfigId = 'new_' + Date.now();
      });
      
      // 保存配置按钮
      $('#saveConfig').on('click', function() {
        saveCurrentConfig();
      });
      
      // 删除配置按钮
      $('#deleteConfig').on('click', function() {
        if (confirm('确定要删除此配置吗？此操作不可恢复。')) {
          deleteCurrentConfig();
        }
      });
      
      // 加载所有配置
      function loadAllConfigs() {
        $.ajax({
          url: '/admin/ops-config',
          method: 'GET',
          success: function(response) {
            if (response.success && response.data) {
              if (Array.isArray(response.data)) {
                configs = response.data;
              } else {
                // 兼容旧版单配置格式
                configs = [{
                  id: 'default',
                  name: '默认配置',
                  isDefault: true,
                  ...response.data
                }];
              }
              
              renderConfigList();
              
              // 如果有配置，选择默认配置或第一个配置
              if (configs.length > 0) {
                const defaultConfig = configs.find(c => c.isDefault) || configs[0];
                selectConfig(defaultConfig.id);
              } else {
                // 没有配置，显示空表单
                resetForm();
                disableForm();
                $('#emptyConfigList').show();
              }
            } else {
              showFormMessage('加载配置失败: ' + (response.message || '未知错误'), 'danger');
              $('#emptyConfigList').show();
            }
          },
          error: function(xhr) {
            showFormMessage('加载配置失败: ' + (xhr.responseJSON?.message || '服务器错误'), 'danger');
            $('#emptyConfigList').show();
          }
        });
      }
      
      // 渲染配置列表
      function renderConfigList() {
        const $list = $('#configList');
        $list.empty();
        
        if (configs.length === 0) {
          $('#emptyConfigList').appendTo($list).show();
          return;
        }
        
        $('#emptyConfigList').hide();
        
        configs.forEach(config => {
          const isDefault = config.isDefault ? '<span class="badge bg-success ms-2">默认</span>' : '';
          const item = `
            <a href="javascript:void(0)" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center config-item" 
               data-id="${config.id}">
              <div>
                <div class="fw-bold">${config.name || '未命名配置'}</div>
                <small class="text-truncate d-block" style="max-width: 200px;">${config.apiBaseUrl}</small>
              </div>
              ${isDefault}
            </a>
          `;
          $list.append(item);
        });
        
        // 绑定点击事件
        $('.config-item').on('click', function() {
          const configId = $(this).data('id');
          selectConfig(configId);
        });
      }
      
      // 选择配置
      function selectConfig(configId) {
        $('.config-item').removeClass('active');
        $(`.config-item[data-id="${configId}"]`).addClass('active');
        
        const config = configs.find(c => c.id === configId);
        if (!config) return;
        
        currentConfigId = configId;
        fillConfigForm(config);
        enableForm();
      }
      
      // 填充配置表单
      function fillConfigForm(config) {
        $('#configId').val(config.id || '');
        $('#configName').val(config.name || '');
        $('#accessToken').val(config.accessToken || '');
        $('#apiBaseUrl').val(config.apiBaseUrl || 'https://api.coze.cn/v1/workflow/run');
        $('#apiTimeout').val(config.apiTimeout || 30000);
        $('#recordRetention').val(config.recordRetention || 7);
        $('#defaultSystem').val(config.defaultSystem || 'ocean');
        $('#promptText').val(config.promptText || '请输入您的运维问题...');
        $('#defaultWorkflow').val(config.defaultWorkflow || '');
        $('#enableMarkdown').prop('checked', config.enableMarkdown !== false);
        $('#isDefault').prop('checked', config.isDefault === true);
        
        loadWorkflows();
      }
      
      // 从表单获取配置
      function getConfigFromForm() {
        return {
          id: $('#configId').val(),
          name: $('#configName').val(),
          accessToken: $('#accessToken').val(),
          apiBaseUrl: $('#apiBaseUrl').val(),
          apiTimeout: parseInt($('#apiTimeout').val()) || 30000,
          recordRetention: parseInt($('#recordRetention').val()) || 7,
          defaultSystem: $('#defaultSystem').val(),
          promptText: $('#promptText').val(),
          defaultWorkflow: $('#defaultWorkflow').val(),
          enableMarkdown: $('#enableMarkdown').is(':checked'),
          isDefault: $('#isDefault').is(':checked')
        };
      }
      
      // 保存当前配置
      function saveCurrentConfig() {
        // 验证必填字段
        if (!$('#configName').val() || !$('#accessToken').val() || !$('#apiBaseUrl').val()) {
          showFormMessage('请填写所有必填字段', 'danger');
          return;
        }
        
        if (!$('#defaultWorkflow').val()) {
          showFormMessage('请选择默认工作流', 'danger');
          return;
        }
        
        const config = getConfigFromForm();
        
        // 如果设置为默认，取消其他配置的默认状态
        if (config.isDefault) {
          configs.forEach(c => {
            if (c.id !== config.id) {
              c.isDefault = false;
            }
          });
        }
        
        // 更新或添加配置
        const existingIndex = configs.findIndex(c => c.id === config.id);
        if (existingIndex >= 0) {
          configs[existingIndex] = config;
        } else {
          configs.push(config);
        }
        
        saveAllConfigs();
      }
      
      // 删除当前配置
      function deleteCurrentConfig() {
        if (!currentConfigId) return;
        
        const index = configs.findIndex(c => c.id === currentConfigId);
        if (index === -1) return;
        
        // 如果删除的是默认配置且还有其他配置，将第一个配置设为默认
        if (configs[index].isDefault && configs.length > 1) {
          const nextDefaultIndex = index === 0 ? 1 : 0;
          configs[nextDefaultIndex].isDefault = true;
        }
        
        // 删除配置
        configs.splice(index, 1);
        saveAllConfigs();
        
        // 更新界面
        if (configs.length > 0) {
          selectConfig(configs[0].id);
        } else {
          resetForm();
          disableForm();
        }
      }
      
      // 保存所有配置到服务器
      function saveAllConfigs() {
        const $saveBtn = $('#saveConfig');
        const originalText = $saveBtn.html();
        $saveBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-1" role="status"></span>保存中...');
        
        $.ajax({
          url: '/admin/ops-config',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify(configs),
          success: function(response) {
            $saveBtn.prop('disabled', false).html(originalText);
            
            if (response.success) {
              showFormMessage('配置已保存', 'success');
              renderConfigList();
            } else {
              showFormMessage('保存失败: ' + (response.message || '未知错误'), 'danger');
            }
          },
          error: function(xhr) {
            $saveBtn.prop('disabled', false).html(originalText);
            showFormMessage('保存失败: ' + (xhr.responseJSON?.message || '服务器错误'), 'danger');
          }
        });
      }
      
      // 显示表单消息
      function showFormMessage(message, type = 'info') {
        const $msg = $('#formMessage');
        $msg.html(`<div class="alert alert-${type} alert-dismissible fade show">
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>`);
        
        // 自动消失
        setTimeout(() => {
          $msg.find('.alert').alert('close');
        }, 5000);
      }
      
      // 重置表单
      function resetForm() {
        $('#configForm').trigger('reset');
        $('#configId').val('');
        currentConfigId = null;
      }
      
      // 启用表单
      function enableForm() {
        $('#configForm input, #configForm select').prop('disabled', false);
        $('#saveConfig, #deleteConfig').prop('disabled', false);
      }
      
      // 禁用表单
      function disableForm() {
        $('#configForm input, #configForm select').prop('disabled', true);
        $('#saveConfig, #deleteConfig').prop('disabled', true);
      }
      
      // 加载工作流列表用于选择
      function loadWorkflows() {
        $.ajax({
          url: '/admin/workflow-config',
          method: 'GET',
          success: function(response) {
            if (response.success && response.data) {
              const workflows = response.data;
              const $select = $('#defaultWorkflow');
              
              // 保存当前选中值
              const currentValue = $select.val();
              
              // 清空并重新填充选项
              $select.empty();
              $select.append('<option value="">-- 请选择工作流 --</option>');
              
              workflows.forEach(workflow => {
                if (workflow.enabled !== false) {
                  const systemName = getSystemName(workflow.system);
                  $select.append(`<option value="${workflow.id}">${workflow.name} (${systemName})</option>`);
                }
              });
              
              // 恢复选中状态
              if (currentValue) {
                $select.val(currentValue);
              }
            }
          },
          error: function(xhr) {
            console.error('加载工作流列表失败:', xhr.responseJSON?.message || '服务器错误');
          }
        });
      }
      
      // 获取系统名称
      function getSystemName(system) {
        switch (system) {
          case 'ocean': return '大洋系统';
          case 'sobey': return '索贝系统';
          case 'common': return '通用';
          default: return system;
        }
      }
    });
  </script>
</body>
</html> 