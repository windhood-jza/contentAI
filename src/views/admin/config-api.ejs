<!-- 通用头部模板替代方案 -->
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <title><%= title %> - ContentAI 管理面板</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/simple-datatables@latest/dist/style.css" rel="stylesheet" />
  <link href="/css/admin.css" rel="stylesheet" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"></script>
</head>
<body class="sb-nav-fixed">
  <nav class="sb-topnav navbar navbar-expand navbar-dark bg-dark">
    <!-- Navbar Brand-->
    <a class="navbar-brand ps-3" href="/admin">ContentAI 管理</a>
    <!-- Sidebar Toggle-->
    <button class="btn btn-link btn-sm order-1 order-lg-0 me-4 me-lg-0" id="sidebarToggle" href="#!"><i class="fas fa-bars"></i></button>
    <!-- Navbar-->
    <ul class="navbar-nav ms-auto me-3 me-lg-4">
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-user fa-fw"></i></a>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
          <li><a class="dropdown-item" href="/admin/profile">个人设置</a></li>
          <li><hr class="dropdown-divider" /></li>
          <li><a class="dropdown-item" href="/admin/logout">退出登录</a></li>
        </ul>
      </li>
    </ul>
  </nav>
  <div id="layoutSidenav">
    <!-- 引入侧边栏 -->
    <%- include('../partials/admin-sidebar') %>
    
    <div id="layoutSidenav_content">
      <main>
        <div class="container-fluid px-4">
          <h1 class="mt-4">API配置</h1>
          <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item"><a href="/admin">首页</a></li>
            <li class="breadcrumb-item active">API配置</li>
          </ol>
          
          <!-- 状态提示 -->
          <div id="alert-container"></div>
          
          <div class="card mb-4">
            <div class="card-header">
              <i class="fas fa-code"></i>
              API设置
            </div>
            <div class="card-body">
              <!-- API配置表单 -->
              <form id="apiConfigForm" onsubmit="event.preventDefault(); saveApiConfig();">
                <div class="row mb-3">
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="apiBaseUrl" class="form-label">API基础URL</label>
                      <input type="text" class="form-control" id="apiBaseUrl" name="apiBaseUrl" required>
                      <div class="form-text text-muted">API服务器的基础URL地址</div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="requestTimeout" class="form-label">请求超时(毫秒)</label>
                      <input type="number" class="form-control" id="requestTimeout" name="requestTimeout" min="1000" step="1000" required>
                      <div class="form-text text-muted">API请求的超时时间</div>
                    </div>
                  </div>
                </div>
                
                <div class="row mb-3">
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="maxRetries" class="form-label">最大重试次数</label>
                      <input type="number" class="form-control" id="maxRetries" name="maxRetries" min="0" max="5" required>
                      <div class="form-text text-muted">请求失败时的最大重试次数</div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="rateLimit" class="form-label">速率限制(每分钟请求数)</label>
                      <input type="number" class="form-control" id="rateLimit" name="rateLimit" min="1" required>
                      <div class="form-text text-muted">每分钟最大API请求数</div>
                    </div>
                  </div>
                </div>
                
                <div class="row mb-3">
                  <div class="col-md-12">
                    <div class="form-group">
                      <label for="apiKey" class="form-label">API密钥</label>
                      <input type="password" class="form-control" id="apiKey" name="apiKey">
                      <div class="form-text text-muted">用于认证的API密钥</div>
                    </div>
                  </div>
                </div>
                
                <div class="row mb-3">
                  <div class="col-md-12">
                    <div class="form-check form-switch">
                      <input class="form-check-input" type="checkbox" id="enableLogging" name="enableLogging">
                      <label class="form-check-label" for="enableLogging">启用API日志记录</label>
                      <div class="form-text text-muted">记录API请求和响应以便调试</div>
                    </div>
                  </div>
                </div>
                
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-save"></i> 保存配置
                </button>
              </form>
            </div>
          </div>
        </div>
      </main>
      <footer class="py-4 bg-light mt-auto">
        <div class="container-fluid px-4">
          <div class="d-flex align-items-center justify-content-between small">
            <div class="text-muted">版权所有 &copy; ContentAI 2025</div>
            <div>
              <a href="#">隐私政策</a>
              &middot;
              <a href="#">条款 &amp; 条件</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/scripts.js"></script>
  
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // 加载现有的API配置
    loadApiConfig();
  });
  
  /**
   * 加载API配置
   * @returns {Promise<void>}
   */
  async function loadApiConfig() {
    try {
      const response = await fetch('/admin/api/config/api');
      if (!response.ok) {
        throw new Error('加载配置失败');
      }
      
      const config = await response.json();
      console.log('已加载API配置:', config);
      
      // 填充表单
      fillApiConfigForm(config);
    } catch (error) {
      console.error('加载API配置出错:', error);
      showAlert('danger', '无法加载配置: ' + error.message);
    }
  }
  
  /**
   * 保存API配置
   * @returns {Promise<void>}
   */
  async function saveApiConfig() {
    try {
      // 获取表单数据
      const formData = {
        apiBaseUrl: document.getElementById('apiBaseUrl').value,
        requestTimeout: parseInt(document.getElementById('requestTimeout').value),
        maxRetries: parseInt(document.getElementById('maxRetries').value),
        rateLimit: parseInt(document.getElementById('rateLimit').value),
        apiKey: document.getElementById('apiKey').value,
        enableLogging: document.getElementById('enableLogging').checked
      };
      
      console.log('准备保存API配置:', formData);
      
      // 发送到API
      const response = await fetch('/admin/api/config/api', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`保存失败 (${response.status}): ${errorText}`);
      }
      
      const result = await response.json();
      console.log('保存API配置结果:', result);
      
      // 显示成功消息
      showAlert('success', '配置已成功保存');
      
    } catch (error) {
      console.error('保存API配置出错:', error);
      showAlert('danger', '保存配置失败: ' + error.message);
    }
  }
  
  /**
   * 填充API配置表单
   * @param {Object} config - API配置对象
   */
  function fillApiConfigForm(config) {
    if (!config) return;
    
    // 获取API配置对象（可能嵌套在response中）
    const apiConfig = config.api || config;
    
    // 填充表单字段
    document.getElementById('apiBaseUrl').value = apiConfig.apiBaseUrl || '';
    document.getElementById('requestTimeout').value = apiConfig.requestTimeout || 5000;
    document.getElementById('maxRetries').value = apiConfig.maxRetries || 3;
    document.getElementById('rateLimit').value = apiConfig.rateLimit || 60;
    document.getElementById('apiKey').value = apiConfig.apiKey || '';
    document.getElementById('enableLogging').checked = apiConfig.enableLogging || false;
  }
  
  /**
   * 显示警告消息
   * @param {string} type - 警告类型 (success, danger, warning, info)
   * @param {string} message - 显示的消息
   */
  function showAlert(type, message) {
    const alertContainer = document.getElementById('alert-container');
    
    // 创建警告元素
    const alertEl = document.createElement('div');
    alertEl.className = `alert alert-${type} alert-dismissible fade show`;
    alertEl.role = 'alert';
    
    // 设置警告内容
    alertEl.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    // 清除之前的警告
    alertContainer.innerHTML = '';
    
    // 添加新警告
    alertContainer.appendChild(alertEl);
    
    // 5秒后自动关闭
    setTimeout(() => {
      const alert = bootstrap.Alert.getOrCreateInstance(alertEl);
      alert.close();
    }, 5000);
  }
  </script>
</body>
</html> 