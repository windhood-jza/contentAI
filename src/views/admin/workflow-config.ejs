<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ContentAI - 工作流配置</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
  <link href="/css/admin.css" rel="stylesheet">
</head>
<body>
  <div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h2><i class="bi bi-diagram-3 me-2"></i>工作流配置</h2>
      <div>
        <a href="/admin/ops-config" class="btn btn-outline-primary me-2">
          <i class="bi bi-headset me-2"></i>运维助手配置
        </a>
        <a href="/admin" class="btn btn-outline-secondary">
          <i class="bi bi-arrow-left me-2"></i>返回管理面板
        </a>
      </div>
    </div>

    <div class="row">
      <div class="col-lg-8">
        <div class="card mb-4">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">工作流配置管理</h5>
            <div>
              <button type="button" class="btn btn-sm btn-success me-2" id="addWorkflow">
                <i class="bi bi-plus-lg me-1"></i>新增工作流
              </button>
              <button type="button" class="btn btn-sm btn-primary" id="saveWorkflows">
                <i class="bi bi-save me-1"></i>保存配置
              </button>
            </div>
          </div>
          <div class="card-body">
            <div class="alert alert-info">
              <i class="bi bi-info-circle me-2"></i>工作流配置用于定义不同系统和场景下的运维助手工作流。
            </div>
            
            <div id="workflowList" class="mt-4">
              <!-- 工作流列表将在这里动态生成 -->
              <div class="placeholder-glow">
                <div class="placeholder col-12 mb-3" style="height: 120px;"></div>
                <div class="placeholder col-12 mb-3" style="height: 120px;"></div>
              </div>
            </div>
            
            <!-- 无工作流提示 -->
            <div id="noWorkflows" class="text-center py-5 d-none">
              <i class="bi bi-exclamation-circle fs-1 text-muted"></i>
              <p class="mt-3 mb-4">暂无工作流配置</p>
              <button class="btn btn-primary" id="addFirstWorkflow">
                <i class="bi bi-plus-lg me-2"></i>添加工作流
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-lg-4">
        <div class="card mb-4">
          <div class="card-header">
            <h5 class="mb-0">工作流调试</h5>
          </div>
          <div class="card-body">
            <p>通过控制台调试工作流响应内容</p>
            <div class="mb-3">
              <label for="testWorkflowId" class="form-label">选择工作流</label>
              <select id="testWorkflowId" class="form-select">
                <option value="">-- 请选择工作流 --</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="testMessage" class="form-label">测试消息</label>
              <textarea id="testMessage" class="form-control" rows="3" placeholder="请输入测试消息..."></textarea>
            </div>
            <div class="d-grid">
              <button class="btn btn-primary" id="testWorkflow">
                <i class="bi bi-play me-2"></i>测试工作流
              </button>
            </div>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <h5 class="mb-0">帮助说明</h5>
          </div>
          <div class="card-body">
            <p class="small">工作流ID格式为GUID，确保每个工作流具有唯一标识符。</p>
            <p class="small">系统标识用于区分不同系统的工作流，例如"ocean"表示大洋系统，"sobey"表示索贝系统。</p>
            <p class="small">参数设置支持JSON格式的高级配置选项，用于控制工作流的行为。</p>
            <hr>
            <p class="small">点击"新增工作流"添加新的工作流配置，点击工作流卡片上的"编辑"按钮修改现有配置。</p>
            <p class="small">完成所有修改后，点击"保存配置"按钮将配置保存到系统。</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 工作流编辑模态框 -->
  <div class="modal fade" id="workflowModal" tabindex="-1" aria-labelledby="workflowModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="workflowModalLabel">编辑工作流</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="关闭"></button>
        </div>
        <div class="modal-body">
          <form id="workflowForm">
            <input type="hidden" id="workflowIndex" value="-1">
            
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="workflowId" class="form-label">工作流ID <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="workflowId" required>
                <div class="form-text">建议使用GUID格式</div>
              </div>
              <div class="col-md-6">
                <label for="workflowSystem" class="form-label">系统标识 <span class="text-danger">*</span></label>
                <select class="form-select" id="workflowSystem" required>
                  <option value="ocean">大洋系统</option>
                  <option value="sobey">索贝系统</option>
                  <option value="common">通用</option>
                </select>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="workflowName" class="form-label">工作流名称 <span class="text-danger">*</span></label>
              <input type="text" class="form-control" id="workflowName" required>
            </div>
            
            <div class="mb-3">
              <label for="workflowDescription" class="form-label">工作流描述</label>
              <textarea class="form-control" id="workflowDescription" rows="2"></textarea>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="workflowVersion" class="form-label">版本</label>
                <input type="text" class="form-control" id="workflowVersion" value="1.0">
              </div>
              <div class="col-md-6">
                <label for="workflowPriority" class="form-label">优先级</label>
                <input type="number" class="form-control" id="workflowPriority" value="10" min="1" max="100">
                <div class="form-text">数值越小优先级越高</div>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="workflowParameters" class="form-label">参数设置（JSON格式）</label>
              <textarea class="form-control" id="workflowParameters" rows="5" placeholder='{
  "maxTokens": 2000,
  "temperature": 0.7
}'></textarea>
              <div class="form-text">可选，默认为空对象 {}</div>
            </div>
            
            <div class="mb-3">
              <label for="workflowMatchPatterns" class="form-label">匹配模式（每行一个）</label>
              <textarea class="form-control" id="workflowMatchPatterns" rows="3" placeholder="大洋播出
如何导入素材
系统登录问题"></textarea>
              <div class="form-text">输入包含这些关键词的问题将使用此工作流</div>
            </div>
            
            <div class="form-check form-switch mb-3">
              <input class="form-check-input" type="checkbox" id="workflowEnabled" checked>
              <label class="form-check-label" for="workflowEnabled">启用此工作流</label>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
          <button type="button" class="btn btn-danger me-auto" id="deleteWorkflow">删除</button>
          <button type="button" class="btn btn-primary" id="saveWorkflow">保存</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 工作流测试结果模态框 -->
  <div class="modal fade" id="testResultModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">工作流测试结果</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="关闭"></button>
        </div>
        <div class="modal-body">
          <div id="testResultLoading" class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">加载中...</span>
            </div>
            <p class="mt-3">正在测试工作流，请稍候...</p>
          </div>
          
          <div id="testResultContent" class="d-none">
            <h6>请求信息</h6>
            <pre id="testRequest" class="bg-light p-3 rounded mb-4 small"></pre>
            
            <h6>响应结果</h6>
            <pre id="testResponse" class="bg-light p-3 rounded small"></pre>
          </div>
          
          <div id="testResultError" class="d-none">
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle me-2"></i>
              <span id="testErrorMessage">测试出错</span>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 脚本 -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
  <!-- 修改uuid库引用方式 -->
  <script>
    // 提供一个简单的UUID生成函数
    function uuidv4() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
      });
    }
    
    $(document).ready(function() {
      // 工作流配置数组
      let workflows = [];
      
      // 初始化模态框
      const workflowModal = new bootstrap.Modal(document.getElementById('workflowModal'));
      const testResultModal = new bootstrap.Modal(document.getElementById('testResultModal'));
      
      // 加载工作流配置
      loadWorkflows();
      
      // 添加工作流按钮
      $('#addWorkflow, #addFirstWorkflow').on('click', function() {
        resetWorkflowForm();
        $('#workflowModalLabel').text('新增工作流');
        $('#deleteWorkflow').addClass('d-none');
        workflowModal.show();
      });
      
      // 生成UUID按钮
      $('#workflowId').after('<button type="button" class="btn btn-sm btn-outline-secondary mt-2" id="generateUuid">生成UUID</button>');
      $('#generateUuid').on('click', function() {
        $('#workflowId').val(uuidv4());
      });
      
      // 保存单个工作流按钮
      $('#saveWorkflow').on('click', function() {
        if (!validateWorkflowForm()) {
          return;
        }
        
        const index = parseInt($('#workflowIndex').val());
        const workflow = getWorkflowFromForm();
        
        if (index === -1) {
          // 新增
          workflows.push(workflow);
        } else {
          // 更新
          workflows[index] = workflow;
        }
        
        renderWorkflowList();
        updateTestWorkflowDropdown();
        workflowModal.hide();
      });
      
      // 删除工作流按钮
      $('#deleteWorkflow').on('click', function() {
        if (confirm('确定要删除此工作流吗？此操作无法撤销。')) {
          const index = parseInt($('#workflowIndex').val());
          if (index !== -1) {
            workflows.splice(index, 1);
            renderWorkflowList();
            updateTestWorkflowDropdown();
            workflowModal.hide();
          }
        }
      });
      
      // 保存所有工作流配置
      $('#saveWorkflows').on('click', function() {
        saveAllWorkflows();
      });
      
      // 测试工作流按钮
      $('#testWorkflow').on('click', function() {
        const workflowId = $('#testWorkflowId').val();
        const message = $('#testMessage').val().trim();
        
        if (!workflowId) {
          alert('请选择要测试的工作流');
          return;
        }
        
        if (!message) {
          alert('请输入测试消息');
          return;
        }
        
        testWorkflow(workflowId, message);
      });
      
      // 加载工作流配置
      function loadWorkflows() {
        $.ajax({
          url: '/admin/workflow-config',
          method: 'GET',
          success: function(response) {
            if (response.success && response.data) {
              workflows = response.data;
              renderWorkflowList();
              updateTestWorkflowDropdown();
            } else {
              showError('加载工作流配置失败: ' + (response.message || '未知错误'));
              workflows = [];
              renderWorkflowList();
            }
          },
          error: function(xhr) {
            showError('加载工作流配置失败: ' + (xhr.responseJSON?.message || '服务器错误'));
            workflows = [];
            renderWorkflowList();
          }
        });
      }
      
      // 渲染工作流列表
      function renderWorkflowList() {
        const $list = $('#workflowList');
        const $noWorkflows = $('#noWorkflows');
        
        $list.empty();
        
        if (workflows.length === 0) {
          $list.addClass('d-none');
          $noWorkflows.removeClass('d-none');
          return;
        }
        
        $list.removeClass('d-none');
        $noWorkflows.addClass('d-none');
        
        workflows.forEach((workflow, index) => {
          const card = `
            <div class="card mb-3 workflow-card ${workflow.enabled ? '' : 'border-danger'}">
              <div class="card-body">
                <div class="d-flex justify-content-between align-items-start mb-2">
                  <h5 class="card-title mb-0">
                    ${workflow.name}
                    ${workflow.enabled ? 
                      '<span class="badge bg-success ms-2">已启用</span>' : 
                      '<span class="badge bg-danger ms-2">已禁用</span>'}
                  </h5>
                  <div>
                    <span class="badge bg-primary">${getSystemName(workflow.system)}</span>
                    <span class="badge bg-secondary ms-1">优先级: ${workflow.priority || 10}</span>
                  </div>
                </div>
                <p class="card-text text-muted small">${workflow.description || '无描述'}</p>
                <div class="d-flex justify-content-between align-items-center">
                  <div class="small text-truncate" style="max-width: 70%;">
                    <span class="text-muted">ID: </span>${workflow.id}
                  </div>
                  <button type="button" class="btn btn-sm btn-outline-primary edit-workflow" data-index="${index}">
                    <i class="bi bi-pencil me-1"></i>编辑
                  </button>
                </div>
              </div>
            </div>
          `;
          $list.append(card);
        });
        
        // 编辑按钮点击事件
        $('.edit-workflow').on('click', function() {
          const index = $(this).data('index');
          editWorkflow(index);
        });
      }
      
      // 更新测试工作流下拉框
      function updateTestWorkflowDropdown() {
        const $select = $('#testWorkflowId');
        $select.empty();
        $select.append('<option value="">-- 请选择工作流 --</option>');
        
        workflows.forEach(workflow => {
          if (workflow.enabled) {
            $select.append(`<option value="${workflow.id}">${workflow.name} (${getSystemName(workflow.system)})</option>`);
          }
        });
      }
      
      // 编辑工作流
      function editWorkflow(index) {
        if (index < 0 || index >= workflows.length) {
          return;
        }
        
        const workflow = workflows[index];
        
        $('#workflowIndex').val(index);
        $('#workflowId').val(workflow.id);
        $('#workflowSystem').val(workflow.system);
        $('#workflowName').val(workflow.name);
        $('#workflowDescription').val(workflow.description || '');
        $('#workflowVersion').val(workflow.version || '1.0');
        $('#workflowPriority').val(workflow.priority || 10);
        $('#workflowParameters').val(workflow.parameters ? JSON.stringify(workflow.parameters, null, 2) : '{}');
        $('#workflowMatchPatterns').val(Array.isArray(workflow.matchPatterns) ? workflow.matchPatterns.join('\n') : '');
        $('#workflowEnabled').prop('checked', workflow.enabled !== false);
        
        $('#workflowModalLabel').text('编辑工作流');
        $('#deleteWorkflow').removeClass('d-none');
        
        workflowModal.show();
      }
      
      // 重置工作流表单
      function resetWorkflowForm() {
        $('#workflowIndex').val(-1);
        $('#workflowId').val(uuidv4());
        $('#workflowSystem').val('ocean');
        $('#workflowName').val('');
        $('#workflowDescription').val('');
        $('#workflowVersion').val('1.0');
        $('#workflowPriority').val(10);
        $('#workflowParameters').val('{}');
        $('#workflowMatchPatterns').val('');
        $('#workflowEnabled').prop('checked', true);
      }
      
      // 从表单获取工作流对象
      function getWorkflowFromForm() {
        let parameters = {};
        try {
          const paramsText = $('#workflowParameters').val();
          if (paramsText && paramsText.trim() !== '') {
            parameters = JSON.parse(paramsText);
          }
        } catch (e) {
          console.error('参数JSON解析错误', e);
        }
        
        const matchPatterns = $('#workflowMatchPatterns').val()
          .split('\n')
          .map(line => line.trim())
          .filter(line => line !== '');
        
        return {
          id: $('#workflowId').val(),
          system: $('#workflowSystem').val(),
          name: $('#workflowName').val(),
          description: $('#workflowDescription').val(),
          version: $('#workflowVersion').val(),
          priority: parseInt($('#workflowPriority').val()) || 10,
          parameters: parameters,
          matchPatterns: matchPatterns,
          enabled: $('#workflowEnabled').is(':checked')
        };
      }
      
      // 验证工作流表单
      function validateWorkflowForm() {
        if (!$('#workflowId').val()) {
          alert('请输入工作流ID');
          return false;
        }
        
        if (!$('#workflowName').val()) {
          alert('请输入工作流名称');
          return false;
        }
        
        try {
          const paramsText = $('#workflowParameters').val();
          if (paramsText && paramsText.trim() !== '') {
            JSON.parse(paramsText);
          }
        } catch (e) {
          alert('参数设置JSON格式错误');
          return false;
        }
        
        return true;
      }
      
      // 保存所有工作流配置
      function saveAllWorkflows() {
        $.ajax({
          url: '/admin/workflow-config',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify(workflows),
          success: function(response) {
            if (response.success) {
              alert('工作流配置已保存');
            } else {
              alert('保存失败: ' + (response.message || '未知错误'));
            }
          },
          error: function(xhr) {
            alert('保存失败: ' + (xhr.responseJSON?.message || '服务器错误'));
          }
        });
      }
      
      // 测试工作流
      function testWorkflow(workflowId, message) {
        // 重置和显示测试结果模态框
        $('#testResultLoading').removeClass('d-none');
        $('#testResultContent').addClass('d-none');
        $('#testResultError').addClass('d-none');
        testResultModal.show();
        
        // 构建请求数据
        const requestData = {
          workflowId: workflowId,
          message: message
        };
        
        // 显示请求信息
        $('#testRequest').text(JSON.stringify(requestData, null, 2));
        
        // 发送测试请求
        $.ajax({
          url: '/admin/workflow-config/test',
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify(requestData),
          success: function(response) {
            $('#testResultLoading').addClass('d-none');
            
            if (response.success) {
              $('#testResultContent').removeClass('d-none');
              $('#testResponse').text(JSON.stringify(response.data, null, 2));
            } else {
              $('#testResultError').removeClass('d-none');
              $('#testErrorMessage').text('测试失败: ' + (response.message || '未知错误'));
            }
          },
          error: function(xhr) {
            $('#testResultLoading').addClass('d-none');
            $('#testResultError').removeClass('d-none');
            $('#testErrorMessage').text('测试失败: ' + (xhr.responseJSON?.message || '服务器错误'));
          }
        });
      }
      
      // 获取系统名称
      function getSystemName(system) {
        switch (system) {
          case 'ocean': return '大洋系统';
          case 'sobey': return '索贝系统';
          case 'common': return '通用';
          default: return system;
        }
      }
      
      // 显示错误信息
      function showError(message) {
        console.error(message);
        alert(message);
      }
    });
  </script>
</body>
</html> 