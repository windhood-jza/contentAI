---
description: 代码修改规则
globs: 
alwaysApply: true
---
## Cursor Agent 行为规则详解

本节将详细阐述 Cursor Agent 的具体行为规则，为了便于理解，这些规则将分为若干核心类别。

### 核心原则

* **除非我明确要求，否则不要修改任何文件。**
    * 这条基本原则强调用户对代码修改的绝对控制权。Cursor Agent 只有在接收到用户明确的指令后，才能对项目中的文件进行任何更改。
    * 未经用户许可的自主修改可能会扰乱开发流程，引入意想不到的错误，并导致对代码库失去控制。
    * 因此，Cursor Agent 的首要任务是尊重用户的意愿，所有文件层面的操作都必须由用户主动发起。
* **只修改我选中的特定代码。**
    * 当用户请求进行代码修改时，Cursor Agent 的操作范围应严格限定在用户所选定的特定代码区域内。
    * 这样做可以避免 Agent 在不经意间对文件的其他部分进行更改，从而确保修改的精准性和可控性。
    * 这种聚焦式的修改方式有助于开发人员清晰地追踪和理解 AI 所做的具体变动。
* **除非明确指示，否则不要重构现有代码。**
    * 代码重构是一项旨在改进代码结构、可读性和可维护性的重要活动，但它应该由用户根据项目的具体需求和规划来主动发起。
    * Cursor Agent 不应在没有明确指示的情况下，自行对现有代码进行重构。
    * 虽然 Cursor 具备辅助重构的能力，但未经授权的重构可能会引入兼容性问题，改变代码的预期行为，甚至与团队的编码规范相冲突。
* **在删除任何代码或文件之前，始终请求确认。**
    * 删除代码或文件是影响项目的重要操作，必须经过用户的明确批准。
    * 在执行任何删除操作之前，Cursor Agent 必须向用户请求确认。
    * 即使在启用了“YOLO 模式”允许跳过终端命令和文件删除确认的情况下，这条规则也应作为一项更安全的默认行为来执行。
    * 这条规则旨在防止意外的数据丢失或关键代码组件的误删除。

### 代码生成规范

* **生成新代码时，保持代码简洁并添加清晰的注释。**
    * Cursor Agent 生成的任何新代码都应力求简洁明了，避免冗余和复杂的结构。
    * 同时，为了提高代码的可理解性和可维护性，必须添加清晰且有意义的注释，解释代码的功能、目的和实现方式。
    * 良好的注释习惯能够帮助开发人员更好地理解和集成 AI 生成的代码。
* **遵循项目现有的编码风格和约定。**
    * Cursor Agent 在生成代码时，应始终遵守当前项目已经建立的编码风格、约定和最佳实践。
    * 这包括命名规范、代码格式、语言特性使用等各个方面。
    * 通过保持代码风格的一致性，可以提高代码库的整体可读性和团队协作效率。项目规则（.cursorrules 文件）是实现这一目标的重要机制。
* **在生成可能影响现有功能的代码之前，发出警告。**
    * 如果 Cursor Agent 计划生成的新代码可能会对项目中已有的功能产生潜在的影响或改变，那么在执行生成操作之前，应该向用户发出明确的警告。
    * 这种前瞻性的提示能够帮助用户评估潜在的风险，并在接受更改之前仔细审查其可能带来的后果。

### 工作流程与版本控制

* **在进行任何更改之前，先创建一个Git提交或检查点。**
    * 为了保障代码的安全性和可追溯性，在 Cursor Agent 执行任何代码修改之前，系统应提醒用户先创建一个 Git 提交或者利用 Cursor 的检查点功能保存当前状态。
    * 这样，即使在修改过程中出现问题，用户也可以轻松地回滚到之前的稳定版本。版本控制是使用 AI 辅助编码的重要保障措施。
* **如果对任务不确定，请先提问，而不是直接进行修改。**
    * 当 Cursor Agent 接收到用户指令，但对其意图或任务要求存在任何疑问或不确定性时，应该优先选择向用户提出明确的询问以获取更多信息，而不是基于猜测或假设直接进行代码修改。
    * 这种积极沟通的方式能够最大程度地减少因理解偏差而导致的错误操作。

### 项目理解与上下文

* **利用 @ 符号引用项目中的文件、函数或文档以增强上下文理解。**
    * 为了使 Cursor Agent 能够更准确地理解用户的意图和任务背景，应鼓励用户在提问或发出指令时，积极利用 Cursor 提供的 @ 符号来显式地引用项目中的相关文件、函数或文档。
    * 这将有助于 Agent 更全面地把握问题的上下文，从而提供更精准的建议和代码生成。
* **当任务涉及多个文件时，明确指定这些文件。**
    * 对于需要在多个文件中进行修改或生成代码的任务，用户应该明确地指定所有相关的文件名称或路径，以便 Cursor Agent 能够有的放矢地执行操作。
    * 清晰地界定任务范围可以防止 Agent 在不相关的代码区域进行不必要的更改。

### 打包规则

* 只在用户提示打包时才进行编译打包处理


### 需求文档管理规则

* 对于每个项目，自动创建一个需求文档
* 在每次执行修改时，需要先读取需求文档
* 如果发现新增需求，则添加到需求文档中
* 如果发现新需求在需求文档里有不同版本，则更新或修改需求文档
* 一切以对话中的最新要求为准

# Your rule content

- You can @ files here
- You can use markdown but dont have to

