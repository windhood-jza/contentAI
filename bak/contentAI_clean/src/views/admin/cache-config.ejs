<!-- 缓存配置页面 -->
<div class="tab-pane fade" id="cache-config" role="tabpanel" aria-labelledby="cache-config-tab">
  <div class="container py-4">
    <h2 class="mb-4"><i class="bi bi-lightning-charge"></i> 缓存配置</h2>
    
    <div class="alert alert-info">
      <i class="bi bi-info-circle"></i> 此页面用于配置系统缓存参数，合理的缓存设置可以提高系统性能并减少外部API调用。
    </div>
    
    <div class="mb-4">
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">缓存状态</h5>
          <button class="btn btn-sm btn-outline-primary" id="refresh-cache-stats">
            <i class="bi bi-arrow-clockwise"></i> 刷新
          </button>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-3">
              <div class="text-center mb-3">
                <h6>缓存状态</h6>
                <div class="fs-4" id="cache-status">
                  <% if (config.cache.enabled) { %>
                    <span class="badge bg-success">已启用</span>
                  <% } else { %>
                    <span class="badge bg-secondary">已禁用</span>
                  <% } %>
                </div>
              </div>
            </div>
            <div class="col-md-3">
              <div class="text-center mb-3">
                <h6>缓存条目数</h6>
                <div class="fs-4" id="cache-items-count">
                  <span class="badge bg-primary">0</span>
                </div>
              </div>
            </div>
            <div class="col-md-3">
              <div class="text-center mb-3">
                <h6>命中率</h6>
                <div class="fs-4" id="cache-hit-ratio">
                  <span class="badge bg-info">0%</span>
                </div>
              </div>
            </div>
            <div class="col-md-3">
              <div class="text-center mb-3">
                <h6>内存使用</h6>
                <div class="fs-4" id="cache-memory-usage">
                  <span class="badge bg-primary">0 MB</span>
                </div>
              </div>
            </div>
          </div>
          <div class="mt-3 text-end">
            <button class="btn btn-sm btn-warning" id="clear-cache">
              <i class="bi bi-trash"></i> 清空缓存
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <form id="cache-config-form" class="config-form needs-validation" novalidate>
      <div class="row mb-4">
        <div class="col-md-6 mb-4">
          <div class="card h-100">
            <div class="card-header">
              <h5 class="mb-0">基本缓存设置</h5>
            </div>
            <div class="card-body">
              <div class="form-check form-switch mb-4">
                <input class="form-check-input" type="checkbox" id="enabled" name="enabled" <%= config.cache.enabled ? 'checked' : '' %>>
                <label class="form-check-label" for="enabled">启用缓存</label>
                <div class="form-text">开启或关闭系统缓存功能</div>
              </div>
              
              <div class="mb-3">
                <label for="expiry" class="form-label">缓存过期时间（秒）</label>
                <input type="number" class="form-control" id="expiry" name="expiry" min="60" max="86400" value="<%= config.cache.expiry %>" required>
                <div class="form-text">缓存项的有效期，过期后将重新从API获取数据</div>
                <div class="invalid-feedback">请输入60-86400之间的有效数字（1分钟到1天）</div>
              </div>
              
              <div class="mb-3">
                <label for="maxItems" class="form-label">最大缓存条目数</label>
                <input type="number" class="form-control" id="maxItems" name="maxItems" min="10" max="10000" value="<%= config.cache.maxItems %>" required>
                <div class="form-text">系统可缓存的最大条目数，超出后将自动删除最旧的条目</div>
                <div class="invalid-feedback">请输入10-10000之间的有效数字</div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="col-md-6 mb-4">
          <div class="card h-100">
            <div class="card-header">
              <h5 class="mb-0">高级缓存设置</h5>
            </div>
            <div class="card-body">
              <div class="mb-3">
                <label for="evictionPolicy" class="form-label">缓存淘汰策略</label>
                <select class="form-select" id="evictionPolicy" name="evictionPolicy">
                  <option value="lru" <%= (!config.cache.evictionPolicy || config.cache.evictionPolicy === 'lru') ? 'selected' : '' %>>LRU（最近最少使用）</option>
                  <option value="lfu" <%= config.cache.evictionPolicy === 'lfu' ? 'selected' : '' %>>LFU（最不经常使用）</option>
                  <option value="fifo" <%= config.cache.evictionPolicy === 'fifo' ? 'selected' : '' %>>FIFO（先进先出）</option>
                </select>
                <div class="form-text">当缓存达到最大条目数时，选择要删除的条目的策略</div>
              </div>
              
              <div class="mb-3">
                <label for="maxSize" class="form-label">最大缓存大小（MB）</label>
                <input type="number" class="form-control" id="maxSize" name="maxSize" min="1" max="1024" value="<%= config.cache.maxSize || 100 %>" required>
                <div class="form-text">缓存占用的最大内存大小</div>
                <div class="invalid-feedback">请输入1-1024之间的有效数字</div>
              </div>
              
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="persistCache" name="persistCache" <%= config.cache.persistCache ? 'checked' : '' %>>
                <label class="form-check-label" for="persistCache">持久化缓存</label>
                <div class="form-text">将缓存保存到磁盘，系统重启后可恢复</div>
              </div>
              
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="compressCache" name="compressCache" <%= config.cache.compressCache ? 'checked' : '' %>>
                <label class="form-check-label" for="compressCache">压缩缓存数据</label>
                <div class="form-text">压缩缓存数据以节省内存，但会增加CPU开销</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="row mb-4">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header">
              <h5 class="mb-0">缓存规则</h5>
            </div>
            <div class="card-body">
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="cacheSearchResults" name="cacheSearchResults" <%= config.cache.cacheSearchResults !== false ? 'checked' : '' %>>
                <label class="form-check-label" for="cacheSearchResults">缓存搜索结果</label>
                <div class="form-text">存储并重用相同关键词的搜索结果</div>
              </div>
              
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="cacheCountResults" name="cacheCountResults" <%= config.cache.cacheCountResults !== false ? 'checked' : '' %>>
                <label class="form-check-label" for="cacheCountResults">缓存计数结果</label>
                <div class="form-text">存储并重用相同关键词的计数结果</div>
              </div>
              
              <div class="mb-3">
                <label for="excludedKeywords" class="form-label">排除缓存的关键词</label>
                <input type="text" class="form-control" id="excludedKeywords" name="excludedKeywords" value="<%= config.cache.excludedKeywords || '' %>">
                <div class="form-text">这些关键词的搜索结果将不会被缓存（用逗号分隔）</div>
              </div>
              
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="cacheVariationsBySort" name="cacheVariationsBySort" <%= config.cache.cacheVariationsBySort ? 'checked' : '' %>>
                <label class="form-check-label" for="cacheVariationsBySort">按排序方式缓存变体</label>
                <div class="form-text">为同一关键词的不同排序方式存储单独的缓存</div>
              </div>
              
              <div class="form-check form-switch mb-3">
                <input class="form-check-input" type="checkbox" id="cacheVariationsByPageSize" name="cacheVariationsByPageSize" <%= config.cache.cacheVariationsByPageSize ? 'checked' : '' %>>
                <label class="form-check-label" for="cacheVariationsByPageSize">按每页结果数缓存变体</label>
                <div class="form-text">为同一关键词的不同每页结果数设置存储单独的缓存</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="d-flex justify-content-between">
        <button type="button" class="btn btn-outline-secondary" id="reset-cache-config">
          <i class="bi bi-arrow-counterclockwise"></i> 重置为默认
        </button>
        <button type="submit" class="btn btn-primary">
          <i class="bi bi-save"></i> 保存配置
        </button>
      </div>
    </form>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // 刷新缓存状态
      function refreshCacheStats() {
        fetch('/admin/cache/stats')
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              document.getElementById('cache-items-count').innerHTML = `<span class="badge bg-primary">${data.stats.itemsCount}</span>`;
              document.getElementById('cache-hit-ratio').innerHTML = `<span class="badge bg-info">${data.stats.hitRatio}%</span>`;
              document.getElementById('cache-memory-usage').innerHTML = `<span class="badge bg-primary">${data.stats.memoryUsage} MB</span>`;
            } else {
              showMessage('获取缓存统计信息失败', 'danger');
            }
          })
          .catch(error => {
            console.error('获取缓存统计信息时出错:', error);
            showMessage('获取缓存统计信息时发生错误', 'danger');
          });
      }
      
      // 初始刷新
      refreshCacheStats();
      
      // 刷新按钮点击
      document.getElementById('refresh-cache-stats').addEventListener('click', function() {
        refreshCacheStats();
        showMessage('缓存统计信息已刷新', 'success');
      });
      
      // 清空缓存
      document.getElementById('clear-cache').addEventListener('click', function() {
        if (confirm('确定要清空所有缓存吗？此操作不可撤销。')) {
          fetch('/admin/cache/clear', {
            method: 'POST'
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showMessage('缓存已成功清空', 'success');
              refreshCacheStats();
            } else {
              showMessage('清空缓存失败: ' + data.error, 'danger');
            }
          })
          .catch(error => {
            console.error('清空缓存时出错:', error);
            showMessage('清空缓存时发生错误', 'danger');
          });
        }
      });
      
      // 表单提交
      const cacheConfigForm = document.getElementById('cache-config-form');
      cacheConfigForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        if (!cacheConfigForm.checkValidity()) {
          event.stopPropagation();
          cacheConfigForm.classList.add('was-validated');
          return;
        }
        
        // 收集表单数据
        const formData = new FormData(cacheConfigForm);
        const cacheConfig = {
          enabled: formData.get('enabled') === 'on',
          expiry: parseInt(formData.get('expiry')),
          maxItems: parseInt(formData.get('maxItems')),
          evictionPolicy: formData.get('evictionPolicy'),
          maxSize: parseInt(formData.get('maxSize')),
          persistCache: formData.get('persistCache') === 'on',
          compressCache: formData.get('compressCache') === 'on',
          cacheSearchResults: formData.get('cacheSearchResults') === 'on',
          cacheCountResults: formData.get('cacheCountResults') === 'on',
          excludedKeywords: formData.get('excludedKeywords'),
          cacheVariationsBySort: formData.get('cacheVariationsBySort') === 'on',
          cacheVariationsByPageSize: formData.get('cacheVariationsByPageSize') === 'on'
        };
        
        // 发送配置到服务器
        fetch('/admin/config/cache', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(cacheConfig)
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showMessage('缓存配置已成功保存', 'success');
            // 更新缓存状态显示
            document.getElementById('cache-status').innerHTML = cacheConfig.enabled ? 
              '<span class="badge bg-success">已启用</span>' : 
              '<span class="badge bg-secondary">已禁用</span>';
            refreshCacheStats();
          } else {
            showMessage('保存缓存配置失败: ' + data.error, 'danger');
          }
        })
        .catch(error => {
          console.error('保存缓存配置时出错:', error);
          showMessage('保存缓存配置时发生错误', 'danger');
        });
      });
      
      // 重置配置按钮
      document.getElementById('reset-cache-config').addEventListener('click', function() {
        if (confirm('确定要重置所有缓存配置为默认值吗？此操作不可撤销。')) {
          fetch('/admin/config/cache/reset', {
            method: 'POST'
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showMessage('缓存配置已重置为默认值', 'success');
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              showMessage('重置缓存配置失败: ' + data.error, 'danger');
            }
          })
          .catch(error => {
            console.error('重置缓存配置时出错:', error);
            showMessage('重置缓存配置时发生错误', 'danger');
          });
        }
      });
    });
  </script>
</div> 