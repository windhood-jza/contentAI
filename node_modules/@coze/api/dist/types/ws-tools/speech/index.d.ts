import { type CreateSpeechWsReq, type CreateSpeechWsRes, type WebSocketAPI } from '../..';
import { type WsToolsOptions } from '..';
declare class WsSpeechClient {
    ws: WebSocketAPI<CreateSpeechWsReq, CreateSpeechWsRes> | null;
    private listeners;
    private wavStreamPlayer;
    private trackId;
    private api;
    private totalDuration;
    private playbackStartTime;
    private playbackPauseTime;
    private playbackTimeout;
    private elapsedBeforePause;
    constructor(config: WsToolsOptions);
    init(): Promise<WebSocketAPI<CreateSpeechWsReq, CreateSpeechWsRes>>;
    connect({ voiceId }?: {
        voiceId?: string;
    }): Promise<void>;
    disconnect(): Promise<void>;
    append(message: string): void;
    complete(): void;
    appendAndComplete(message: string): void;
    interrupt(): Promise<void>;
    pause(): Promise<void>;
    resume(): Promise<void>;
    togglePlay(): Promise<void>;
    isPlaying(): boolean;
    on(event: string, callback: (data: CreateSpeechWsRes | undefined) => void): void;
    off(event: string, callback: (data: CreateSpeechWsRes | undefined) => void): void;
    private closeWs;
    private emit;
    private handleAudioMessage;
}
export default WsSpeechClient;
