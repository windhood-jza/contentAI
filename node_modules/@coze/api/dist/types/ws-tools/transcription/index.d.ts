import { type CreateTranscriptionsWsReq, type CreateTranscriptionsWsRes, type WebSocketAPI } from '../..';
import { type WsToolsOptions } from '..';
declare class WsTranscriptionClient {
    ws: WebSocketAPI<CreateTranscriptionsWsReq, CreateTranscriptionsWsRes> | null;
    private listeners;
    private wavRecorder;
    private api;
    constructor(config: WsToolsOptions);
    init(): Promise<WebSocketAPI<CreateTranscriptionsWsReq, CreateTranscriptionsWsRes>>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    getDeviceList(): Promise<(MediaDeviceInfo & {
        default: boolean;
    })[]>;
    getStatus(): "ended" | "paused" | "recording";
    record(): Promise<void>;
    end(): Promise<import("../wavtools/lib/wav_packer").WavPackerAudioType>;
    pause(): Promise<true>;
    on(event: string, callback: (data: CreateTranscriptionsWsRes) => void): void;
    off(event: string, callback: (data: CreateTranscriptionsWsRes) => void): void;
    private closeWs;
    private emit;
}
export default WsTranscriptionClient;
